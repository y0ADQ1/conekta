"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateWebhookKeyAcceptLanguageEnum = exports.GetWebhookKeysAcceptLanguageEnum = exports.GetWebhookKeyAcceptLanguageEnum = exports.DeleteWebhookKeyAcceptLanguageEnum = exports.CreateWebhookKeyAcceptLanguageEnum = exports.WebhookKeysApi = exports.WebhookKeysApiFactory = exports.WebhookKeysApiFp = exports.WebhookKeysApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * WebhookKeysApi - axios parameter creator
 * @export
 */
const WebhookKeysApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a webhook key
         * @summary Create Webhook Key
         * @param {CreateWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {WebhookKeyRequest} [webhookKeyRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebhookKey: (acceptLanguage_1, webhookKeyRequest_1, ...args_1) => __awaiter(this, [acceptLanguage_1, webhookKeyRequest_1, ...args_1], void 0, function* (acceptLanguage, webhookKeyRequest, options = {}) {
            const localVarPath = `/webhook_keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(webhookKeyRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete Webhook key
         * @param {string} id Identifier of the resource
         * @param {DeleteWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhookKey: (id_1, acceptLanguage_2, ...args_2) => __awaiter(this, [id_1, acceptLanguage_2, ...args_2], void 0, function* (id, acceptLanguage, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteWebhookKey', 'id', id);
            const localVarPath = `/webhook_keys/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get Webhook Key
         * @param {string} id Identifier of the resource
         * @param {GetWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookKey: (id_2, acceptLanguage_3, xChildCompanyId_1, ...args_3) => __awaiter(this, [id_2, acceptLanguage_3, xChildCompanyId_1, ...args_3], void 0, function* (id, acceptLanguage, xChildCompanyId, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getWebhookKey', 'id', id);
            const localVarPath = `/webhook_keys/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }
            if (xChildCompanyId != null) {
                localVarHeaderParameter['X-Child-Company-Id'] = String(xChildCompanyId);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Consume the list of webhook keys you have
         * @summary Get List of Webhook Keys
         * @param {GetWebhookKeysAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {number} [limit] The numbers of items to return, the maximum value is 250
         * @param {string} [search] General order search, e.g. by mail, reference etc.
         * @param {string} [next] next page
         * @param {string} [previous] previous page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookKeys: (acceptLanguage_4, xChildCompanyId_2, limit_1, search_1, next_1, previous_1, ...args_4) => __awaiter(this, [acceptLanguage_4, xChildCompanyId_2, limit_1, search_1, next_1, previous_1, ...args_4], void 0, function* (acceptLanguage, xChildCompanyId, limit, search, next, previous, options = {}) {
            const localVarPath = `/webhook_keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (next !== undefined) {
                localVarQueryParameter['next'] = next;
            }
            if (previous !== undefined) {
                localVarQueryParameter['previous'] = previous;
            }
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }
            if (xChildCompanyId != null) {
                localVarHeaderParameter['X-Child-Company-Id'] = String(xChildCompanyId);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * updates an existing webhook key
         * @summary Update Webhook Key
         * @param {string} id Identifier of the resource
         * @param {UpdateWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {WebhookKeyUpdateRequest} [webhookKeyUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhookKey: (id_3, acceptLanguage_5, webhookKeyUpdateRequest_1, ...args_5) => __awaiter(this, [id_3, acceptLanguage_5, webhookKeyUpdateRequest_1, ...args_5], void 0, function* (id, acceptLanguage, webhookKeyUpdateRequest, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateWebhookKey', 'id', id);
            const localVarPath = `/webhook_keys/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(webhookKeyUpdateRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.WebhookKeysApiAxiosParamCreator = WebhookKeysApiAxiosParamCreator;
/**
 * WebhookKeysApi - functional programming interface
 * @export
 */
const WebhookKeysApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.WebhookKeysApiAxiosParamCreator)(configuration);
    return {
        /**
         * Create a webhook key
         * @summary Create Webhook Key
         * @param {CreateWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {WebhookKeyRequest} [webhookKeyRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebhookKey(acceptLanguage, webhookKeyRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createWebhookKey(acceptLanguage, webhookKeyRequest, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['WebhookKeysApi.createWebhookKey']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         *
         * @summary Delete Webhook key
         * @param {string} id Identifier of the resource
         * @param {DeleteWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhookKey(id, acceptLanguage, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteWebhookKey(id, acceptLanguage, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['WebhookKeysApi.deleteWebhookKey']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get Webhook Key
         * @param {string} id Identifier of the resource
         * @param {GetWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookKey(id, acceptLanguage, xChildCompanyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getWebhookKey(id, acceptLanguage, xChildCompanyId, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['WebhookKeysApi.getWebhookKey']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Consume the list of webhook keys you have
         * @summary Get List of Webhook Keys
         * @param {GetWebhookKeysAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {number} [limit] The numbers of items to return, the maximum value is 250
         * @param {string} [search] General order search, e.g. by mail, reference etc.
         * @param {string} [next] next page
         * @param {string} [previous] previous page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookKeys(acceptLanguage, xChildCompanyId, limit, search, next, previous, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getWebhookKeys(acceptLanguage, xChildCompanyId, limit, search, next, previous, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['WebhookKeysApi.getWebhookKeys']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * updates an existing webhook key
         * @summary Update Webhook Key
         * @param {string} id Identifier of the resource
         * @param {UpdateWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {WebhookKeyUpdateRequest} [webhookKeyUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhookKey(id, acceptLanguage, webhookKeyUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateWebhookKey(id, acceptLanguage, webhookKeyUpdateRequest, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['WebhookKeysApi.updateWebhookKey']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
exports.WebhookKeysApiFp = WebhookKeysApiFp;
/**
 * WebhookKeysApi - factory interface
 * @export
 */
const WebhookKeysApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.WebhookKeysApiFp)(configuration);
    return {
        /**
         * Create a webhook key
         * @summary Create Webhook Key
         * @param {CreateWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {WebhookKeyRequest} [webhookKeyRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebhookKey(acceptLanguage, webhookKeyRequest, options) {
            return localVarFp.createWebhookKey(acceptLanguage, webhookKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete Webhook key
         * @param {string} id Identifier of the resource
         * @param {DeleteWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhookKey(id, acceptLanguage, options) {
            return localVarFp.deleteWebhookKey(id, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Webhook Key
         * @param {string} id Identifier of the resource
         * @param {GetWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookKey(id, acceptLanguage, xChildCompanyId, options) {
            return localVarFp.getWebhookKey(id, acceptLanguage, xChildCompanyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Consume the list of webhook keys you have
         * @summary Get List of Webhook Keys
         * @param {GetWebhookKeysAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {number} [limit] The numbers of items to return, the maximum value is 250
         * @param {string} [search] General order search, e.g. by mail, reference etc.
         * @param {string} [next] next page
         * @param {string} [previous] previous page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookKeys(acceptLanguage, xChildCompanyId, limit, search, next, previous, options) {
            return localVarFp.getWebhookKeys(acceptLanguage, xChildCompanyId, limit, search, next, previous, options).then((request) => request(axios, basePath));
        },
        /**
         * updates an existing webhook key
         * @summary Update Webhook Key
         * @param {string} id Identifier of the resource
         * @param {UpdateWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {WebhookKeyUpdateRequest} [webhookKeyUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhookKey(id, acceptLanguage, webhookKeyUpdateRequest, options) {
            return localVarFp.updateWebhookKey(id, acceptLanguage, webhookKeyUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.WebhookKeysApiFactory = WebhookKeysApiFactory;
/**
 * WebhookKeysApi - object-oriented interface
 * @export
 * @class WebhookKeysApi
 * @extends {BaseAPI}
 */
class WebhookKeysApi extends base_1.BaseAPI {
    /**
     * Create a webhook key
     * @summary Create Webhook Key
     * @param {CreateWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {WebhookKeyRequest} [webhookKeyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApi
     */
    createWebhookKey(acceptLanguage, webhookKeyRequest, options) {
        return (0, exports.WebhookKeysApiFp)(this.configuration).createWebhookKey(acceptLanguage, webhookKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete Webhook key
     * @param {string} id Identifier of the resource
     * @param {DeleteWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApi
     */
    deleteWebhookKey(id, acceptLanguage, options) {
        return (0, exports.WebhookKeysApiFp)(this.configuration).deleteWebhookKey(id, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Webhook Key
     * @param {string} id Identifier of the resource
     * @param {GetWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApi
     */
    getWebhookKey(id, acceptLanguage, xChildCompanyId, options) {
        return (0, exports.WebhookKeysApiFp)(this.configuration).getWebhookKey(id, acceptLanguage, xChildCompanyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Consume the list of webhook keys you have
     * @summary Get List of Webhook Keys
     * @param {GetWebhookKeysAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApi
     */
    getWebhookKeys(acceptLanguage, xChildCompanyId, limit, search, next, previous, options) {
        return (0, exports.WebhookKeysApiFp)(this.configuration).getWebhookKeys(acceptLanguage, xChildCompanyId, limit, search, next, previous, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * updates an existing webhook key
     * @summary Update Webhook Key
     * @param {string} id Identifier of the resource
     * @param {UpdateWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {WebhookKeyUpdateRequest} [webhookKeyUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApi
     */
    updateWebhookKey(id, acceptLanguage, webhookKeyUpdateRequest, options) {
        return (0, exports.WebhookKeysApiFp)(this.configuration).updateWebhookKey(id, acceptLanguage, webhookKeyUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.WebhookKeysApi = WebhookKeysApi;
/**
 * @export
 */
exports.CreateWebhookKeyAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
};
/**
 * @export
 */
exports.DeleteWebhookKeyAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
};
/**
 * @export
 */
exports.GetWebhookKeyAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
};
/**
 * @export
 */
exports.GetWebhookKeysAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
};
/**
 * @export
 */
exports.UpdateWebhookKeyAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
};
