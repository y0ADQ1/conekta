/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { OrderTaxRequest } from '../model';
import { UpdateOrderTaxRequest } from '../model';
import { UpdateOrderTaxResponse } from '../model';
/**
 * TaxesApi - axios parameter creator
 * @export
 */
export declare const TaxesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create new taxes for an existing orden
     * @summary Create Tax
     * @param {string} id Identifier of the resource
     * @param {OrderTaxRequest} orderTaxRequest requested field for a taxes
     * @param {OrdersCreateTaxesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersCreateTaxes: (id: string, orderTaxRequest: OrderTaxRequest, acceptLanguage?: OrdersCreateTaxesAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete taxes for an existing orden
     * @summary Delete Tax
     * @param {string} id Identifier of the resource
     * @param {string} taxId identifier
     * @param {OrdersDeleteTaxesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersDeleteTaxes: (id: string, taxId: string, acceptLanguage?: OrdersDeleteTaxesAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update taxes for an existing orden
     * @summary Update Tax
     * @param {string} id Identifier of the resource
     * @param {string} taxId identifier
     * @param {UpdateOrderTaxRequest} updateOrderTaxRequest requested field for taxes
     * @param {OrdersUpdateTaxesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersUpdateTaxes: (id: string, taxId: string, updateOrderTaxRequest: UpdateOrderTaxRequest, acceptLanguage?: OrdersUpdateTaxesAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TaxesApi - functional programming interface
 * @export
 */
export declare const TaxesApiFp: (configuration?: Configuration) => {
    /**
     * Create new taxes for an existing orden
     * @summary Create Tax
     * @param {string} id Identifier of the resource
     * @param {OrderTaxRequest} orderTaxRequest requested field for a taxes
     * @param {OrdersCreateTaxesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersCreateTaxes(id: string, orderTaxRequest: OrderTaxRequest, acceptLanguage?: OrdersCreateTaxesAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateOrderTaxResponse>>;
    /**
     * Delete taxes for an existing orden
     * @summary Delete Tax
     * @param {string} id Identifier of the resource
     * @param {string} taxId identifier
     * @param {OrdersDeleteTaxesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersDeleteTaxes(id: string, taxId: string, acceptLanguage?: OrdersDeleteTaxesAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateOrderTaxResponse>>;
    /**
     * Update taxes for an existing orden
     * @summary Update Tax
     * @param {string} id Identifier of the resource
     * @param {string} taxId identifier
     * @param {UpdateOrderTaxRequest} updateOrderTaxRequest requested field for taxes
     * @param {OrdersUpdateTaxesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersUpdateTaxes(id: string, taxId: string, updateOrderTaxRequest: UpdateOrderTaxRequest, acceptLanguage?: OrdersUpdateTaxesAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateOrderTaxResponse>>;
};
/**
 * TaxesApi - factory interface
 * @export
 */
export declare const TaxesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create new taxes for an existing orden
     * @summary Create Tax
     * @param {string} id Identifier of the resource
     * @param {OrderTaxRequest} orderTaxRequest requested field for a taxes
     * @param {OrdersCreateTaxesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersCreateTaxes(id: string, orderTaxRequest: OrderTaxRequest, acceptLanguage?: OrdersCreateTaxesAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<UpdateOrderTaxResponse>;
    /**
     * Delete taxes for an existing orden
     * @summary Delete Tax
     * @param {string} id Identifier of the resource
     * @param {string} taxId identifier
     * @param {OrdersDeleteTaxesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersDeleteTaxes(id: string, taxId: string, acceptLanguage?: OrdersDeleteTaxesAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<UpdateOrderTaxResponse>;
    /**
     * Update taxes for an existing orden
     * @summary Update Tax
     * @param {string} id Identifier of the resource
     * @param {string} taxId identifier
     * @param {UpdateOrderTaxRequest} updateOrderTaxRequest requested field for taxes
     * @param {OrdersUpdateTaxesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersUpdateTaxes(id: string, taxId: string, updateOrderTaxRequest: UpdateOrderTaxRequest, acceptLanguage?: OrdersUpdateTaxesAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<UpdateOrderTaxResponse>;
};
/**
 * TaxesApi - interface
 * @export
 * @interface TaxesApi
 */
export interface TaxesApiInterface {
    /**
     * Create new taxes for an existing orden
     * @summary Create Tax
     * @param {string} id Identifier of the resource
     * @param {OrderTaxRequest} orderTaxRequest requested field for a taxes
     * @param {OrdersCreateTaxesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApiInterface
     */
    ordersCreateTaxes(id: string, orderTaxRequest: OrderTaxRequest, acceptLanguage?: OrdersCreateTaxesAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<UpdateOrderTaxResponse>;
    /**
     * Delete taxes for an existing orden
     * @summary Delete Tax
     * @param {string} id Identifier of the resource
     * @param {string} taxId identifier
     * @param {OrdersDeleteTaxesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApiInterface
     */
    ordersDeleteTaxes(id: string, taxId: string, acceptLanguage?: OrdersDeleteTaxesAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<UpdateOrderTaxResponse>;
    /**
     * Update taxes for an existing orden
     * @summary Update Tax
     * @param {string} id Identifier of the resource
     * @param {string} taxId identifier
     * @param {UpdateOrderTaxRequest} updateOrderTaxRequest requested field for taxes
     * @param {OrdersUpdateTaxesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApiInterface
     */
    ordersUpdateTaxes(id: string, taxId: string, updateOrderTaxRequest: UpdateOrderTaxRequest, acceptLanguage?: OrdersUpdateTaxesAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<UpdateOrderTaxResponse>;
}
/**
 * TaxesApi - object-oriented interface
 * @export
 * @class TaxesApi
 * @extends {BaseAPI}
 */
export declare class TaxesApi extends BaseAPI implements TaxesApiInterface {
    /**
     * Create new taxes for an existing orden
     * @summary Create Tax
     * @param {string} id Identifier of the resource
     * @param {OrderTaxRequest} orderTaxRequest requested field for a taxes
     * @param {OrdersCreateTaxesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApi
     */
    ordersCreateTaxes(id: string, orderTaxRequest: OrderTaxRequest, acceptLanguage?: OrdersCreateTaxesAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateOrderTaxResponse, any>>;
    /**
     * Delete taxes for an existing orden
     * @summary Delete Tax
     * @param {string} id Identifier of the resource
     * @param {string} taxId identifier
     * @param {OrdersDeleteTaxesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApi
     */
    ordersDeleteTaxes(id: string, taxId: string, acceptLanguage?: OrdersDeleteTaxesAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateOrderTaxResponse, any>>;
    /**
     * Update taxes for an existing orden
     * @summary Update Tax
     * @param {string} id Identifier of the resource
     * @param {string} taxId identifier
     * @param {UpdateOrderTaxRequest} updateOrderTaxRequest requested field for taxes
     * @param {OrdersUpdateTaxesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApi
     */
    ordersUpdateTaxes(id: string, taxId: string, updateOrderTaxRequest: UpdateOrderTaxRequest, acceptLanguage?: OrdersUpdateTaxesAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateOrderTaxResponse, any>>;
}
/**
 * @export
 */
export declare const OrdersCreateTaxesAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type OrdersCreateTaxesAcceptLanguageEnum = typeof OrdersCreateTaxesAcceptLanguageEnum[keyof typeof OrdersCreateTaxesAcceptLanguageEnum];
/**
 * @export
 */
export declare const OrdersDeleteTaxesAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type OrdersDeleteTaxesAcceptLanguageEnum = typeof OrdersDeleteTaxesAcceptLanguageEnum[keyof typeof OrdersDeleteTaxesAcceptLanguageEnum];
/**
 * @export
 */
export declare const OrdersUpdateTaxesAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type OrdersUpdateTaxesAcceptLanguageEnum = typeof OrdersUpdateTaxesAcceptLanguageEnum[keyof typeof OrdersUpdateTaxesAcceptLanguageEnum];
