/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { CustomerShippingContacts } from '../model';
import { CustomerShippingContactsResponse } from '../model';
import { CustomerUpdateShippingContacts } from '../model';
/**
 * ShippingContactsApi - axios parameter creator
 * @export
 */
export declare const ShippingContactsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a shipping contacts for a customer.
     * @summary Create a shipping contacts
     * @param {string} id Identifier of the resource
     * @param {CustomerShippingContacts} customerShippingContacts requested field for customer shippings contacts
     * @param {CreateCustomerShippingContactsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerShippingContacts: (id: string, customerShippingContacts: CustomerShippingContacts, acceptLanguage?: CreateCustomerShippingContactsAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete shipping contact that corresponds to a customer ID.
     * @summary Delete shipping contacts
     * @param {string} id Identifier of the resource
     * @param {string} shippingContactsId identifier
     * @param {DeleteCustomerShippingContactsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomerShippingContacts: (id: string, shippingContactsId: string, acceptLanguage?: DeleteCustomerShippingContactsAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update shipping contact that corresponds to a customer ID.
     * @summary Update shipping contacts
     * @param {string} id Identifier of the resource
     * @param {string} shippingContactsId identifier
     * @param {CustomerUpdateShippingContacts} customerUpdateShippingContacts requested field for customer update shippings contacts
     * @param {UpdateCustomerShippingContactsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerShippingContacts: (id: string, shippingContactsId: string, customerUpdateShippingContacts: CustomerUpdateShippingContacts, acceptLanguage?: UpdateCustomerShippingContactsAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ShippingContactsApi - functional programming interface
 * @export
 */
export declare const ShippingContactsApiFp: (configuration?: Configuration) => {
    /**
     * Create a shipping contacts for a customer.
     * @summary Create a shipping contacts
     * @param {string} id Identifier of the resource
     * @param {CustomerShippingContacts} customerShippingContacts requested field for customer shippings contacts
     * @param {CreateCustomerShippingContactsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerShippingContacts(id: string, customerShippingContacts: CustomerShippingContacts, acceptLanguage?: CreateCustomerShippingContactsAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerShippingContactsResponse>>;
    /**
     * Delete shipping contact that corresponds to a customer ID.
     * @summary Delete shipping contacts
     * @param {string} id Identifier of the resource
     * @param {string} shippingContactsId identifier
     * @param {DeleteCustomerShippingContactsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomerShippingContacts(id: string, shippingContactsId: string, acceptLanguage?: DeleteCustomerShippingContactsAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerShippingContactsResponse>>;
    /**
     * Update shipping contact that corresponds to a customer ID.
     * @summary Update shipping contacts
     * @param {string} id Identifier of the resource
     * @param {string} shippingContactsId identifier
     * @param {CustomerUpdateShippingContacts} customerUpdateShippingContacts requested field for customer update shippings contacts
     * @param {UpdateCustomerShippingContactsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerShippingContacts(id: string, shippingContactsId: string, customerUpdateShippingContacts: CustomerUpdateShippingContacts, acceptLanguage?: UpdateCustomerShippingContactsAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerShippingContactsResponse>>;
};
/**
 * ShippingContactsApi - factory interface
 * @export
 */
export declare const ShippingContactsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a shipping contacts for a customer.
     * @summary Create a shipping contacts
     * @param {string} id Identifier of the resource
     * @param {CustomerShippingContacts} customerShippingContacts requested field for customer shippings contacts
     * @param {CreateCustomerShippingContactsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerShippingContacts(id: string, customerShippingContacts: CustomerShippingContacts, acceptLanguage?: CreateCustomerShippingContactsAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<CustomerShippingContactsResponse>;
    /**
     * Delete shipping contact that corresponds to a customer ID.
     * @summary Delete shipping contacts
     * @param {string} id Identifier of the resource
     * @param {string} shippingContactsId identifier
     * @param {DeleteCustomerShippingContactsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomerShippingContacts(id: string, shippingContactsId: string, acceptLanguage?: DeleteCustomerShippingContactsAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<CustomerShippingContactsResponse>;
    /**
     * Update shipping contact that corresponds to a customer ID.
     * @summary Update shipping contacts
     * @param {string} id Identifier of the resource
     * @param {string} shippingContactsId identifier
     * @param {CustomerUpdateShippingContacts} customerUpdateShippingContacts requested field for customer update shippings contacts
     * @param {UpdateCustomerShippingContactsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerShippingContacts(id: string, shippingContactsId: string, customerUpdateShippingContacts: CustomerUpdateShippingContacts, acceptLanguage?: UpdateCustomerShippingContactsAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<CustomerShippingContactsResponse>;
};
/**
 * ShippingContactsApi - interface
 * @export
 * @interface ShippingContactsApi
 */
export interface ShippingContactsApiInterface {
    /**
     * Create a shipping contacts for a customer.
     * @summary Create a shipping contacts
     * @param {string} id Identifier of the resource
     * @param {CustomerShippingContacts} customerShippingContacts requested field for customer shippings contacts
     * @param {CreateCustomerShippingContactsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingContactsApiInterface
     */
    createCustomerShippingContacts(id: string, customerShippingContacts: CustomerShippingContacts, acceptLanguage?: CreateCustomerShippingContactsAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<CustomerShippingContactsResponse>;
    /**
     * Delete shipping contact that corresponds to a customer ID.
     * @summary Delete shipping contacts
     * @param {string} id Identifier of the resource
     * @param {string} shippingContactsId identifier
     * @param {DeleteCustomerShippingContactsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingContactsApiInterface
     */
    deleteCustomerShippingContacts(id: string, shippingContactsId: string, acceptLanguage?: DeleteCustomerShippingContactsAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<CustomerShippingContactsResponse>;
    /**
     * Update shipping contact that corresponds to a customer ID.
     * @summary Update shipping contacts
     * @param {string} id Identifier of the resource
     * @param {string} shippingContactsId identifier
     * @param {CustomerUpdateShippingContacts} customerUpdateShippingContacts requested field for customer update shippings contacts
     * @param {UpdateCustomerShippingContactsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingContactsApiInterface
     */
    updateCustomerShippingContacts(id: string, shippingContactsId: string, customerUpdateShippingContacts: CustomerUpdateShippingContacts, acceptLanguage?: UpdateCustomerShippingContactsAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<CustomerShippingContactsResponse>;
}
/**
 * ShippingContactsApi - object-oriented interface
 * @export
 * @class ShippingContactsApi
 * @extends {BaseAPI}
 */
export declare class ShippingContactsApi extends BaseAPI implements ShippingContactsApiInterface {
    /**
     * Create a shipping contacts for a customer.
     * @summary Create a shipping contacts
     * @param {string} id Identifier of the resource
     * @param {CustomerShippingContacts} customerShippingContacts requested field for customer shippings contacts
     * @param {CreateCustomerShippingContactsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingContactsApi
     */
    createCustomerShippingContacts(id: string, customerShippingContacts: CustomerShippingContacts, acceptLanguage?: CreateCustomerShippingContactsAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomerShippingContactsResponse, any>>;
    /**
     * Delete shipping contact that corresponds to a customer ID.
     * @summary Delete shipping contacts
     * @param {string} id Identifier of the resource
     * @param {string} shippingContactsId identifier
     * @param {DeleteCustomerShippingContactsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingContactsApi
     */
    deleteCustomerShippingContacts(id: string, shippingContactsId: string, acceptLanguage?: DeleteCustomerShippingContactsAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomerShippingContactsResponse, any>>;
    /**
     * Update shipping contact that corresponds to a customer ID.
     * @summary Update shipping contacts
     * @param {string} id Identifier of the resource
     * @param {string} shippingContactsId identifier
     * @param {CustomerUpdateShippingContacts} customerUpdateShippingContacts requested field for customer update shippings contacts
     * @param {UpdateCustomerShippingContactsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingContactsApi
     */
    updateCustomerShippingContacts(id: string, shippingContactsId: string, customerUpdateShippingContacts: CustomerUpdateShippingContacts, acceptLanguage?: UpdateCustomerShippingContactsAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomerShippingContactsResponse, any>>;
}
/**
 * @export
 */
export declare const CreateCustomerShippingContactsAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type CreateCustomerShippingContactsAcceptLanguageEnum = typeof CreateCustomerShippingContactsAcceptLanguageEnum[keyof typeof CreateCustomerShippingContactsAcceptLanguageEnum];
/**
 * @export
 */
export declare const DeleteCustomerShippingContactsAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type DeleteCustomerShippingContactsAcceptLanguageEnum = typeof DeleteCustomerShippingContactsAcceptLanguageEnum[keyof typeof DeleteCustomerShippingContactsAcceptLanguageEnum];
/**
 * @export
 */
export declare const UpdateCustomerShippingContactsAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type UpdateCustomerShippingContactsAcceptLanguageEnum = typeof UpdateCustomerShippingContactsAcceptLanguageEnum[keyof typeof UpdateCustomerShippingContactsAcceptLanguageEnum];
