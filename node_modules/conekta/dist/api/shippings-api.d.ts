/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { ShippingOrderResponse } from '../model';
import { ShippingRequest } from '../model';
/**
 * ShippingsApi - axios parameter creator
 * @export
 */
export declare const ShippingsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create new shipping for an existing orden
     * @summary Create Shipping
     * @param {string} id Identifier of the resource
     * @param {ShippingRequest} shippingRequest requested field for a shipping
     * @param {OrdersCreateShippingAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersCreateShipping: (id: string, shippingRequest: ShippingRequest, acceptLanguage?: OrdersCreateShippingAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete shipping
     * @summary Delete Shipping
     * @param {string} id Identifier of the resource
     * @param {string} shippingId identifier
     * @param {OrdersDeleteShippingAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersDeleteShipping: (id: string, shippingId: string, acceptLanguage?: OrdersDeleteShippingAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update existing shipping for an existing orden
     * @summary Update Shipping
     * @param {string} id Identifier of the resource
     * @param {string} shippingId identifier
     * @param {ShippingRequest} shippingRequest requested field for a shipping
     * @param {OrdersUpdateShippingAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersUpdateShipping: (id: string, shippingId: string, shippingRequest: ShippingRequest, acceptLanguage?: OrdersUpdateShippingAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ShippingsApi - functional programming interface
 * @export
 */
export declare const ShippingsApiFp: (configuration?: Configuration) => {
    /**
     * Create new shipping for an existing orden
     * @summary Create Shipping
     * @param {string} id Identifier of the resource
     * @param {ShippingRequest} shippingRequest requested field for a shipping
     * @param {OrdersCreateShippingAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersCreateShipping(id: string, shippingRequest: ShippingRequest, acceptLanguage?: OrdersCreateShippingAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingOrderResponse>>;
    /**
     * Delete shipping
     * @summary Delete Shipping
     * @param {string} id Identifier of the resource
     * @param {string} shippingId identifier
     * @param {OrdersDeleteShippingAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersDeleteShipping(id: string, shippingId: string, acceptLanguage?: OrdersDeleteShippingAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingOrderResponse>>;
    /**
     * Update existing shipping for an existing orden
     * @summary Update Shipping
     * @param {string} id Identifier of the resource
     * @param {string} shippingId identifier
     * @param {ShippingRequest} shippingRequest requested field for a shipping
     * @param {OrdersUpdateShippingAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersUpdateShipping(id: string, shippingId: string, shippingRequest: ShippingRequest, acceptLanguage?: OrdersUpdateShippingAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingOrderResponse>>;
};
/**
 * ShippingsApi - factory interface
 * @export
 */
export declare const ShippingsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create new shipping for an existing orden
     * @summary Create Shipping
     * @param {string} id Identifier of the resource
     * @param {ShippingRequest} shippingRequest requested field for a shipping
     * @param {OrdersCreateShippingAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersCreateShipping(id: string, shippingRequest: ShippingRequest, acceptLanguage?: OrdersCreateShippingAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<ShippingOrderResponse>;
    /**
     * Delete shipping
     * @summary Delete Shipping
     * @param {string} id Identifier of the resource
     * @param {string} shippingId identifier
     * @param {OrdersDeleteShippingAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersDeleteShipping(id: string, shippingId: string, acceptLanguage?: OrdersDeleteShippingAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<ShippingOrderResponse>;
    /**
     * Update existing shipping for an existing orden
     * @summary Update Shipping
     * @param {string} id Identifier of the resource
     * @param {string} shippingId identifier
     * @param {ShippingRequest} shippingRequest requested field for a shipping
     * @param {OrdersUpdateShippingAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersUpdateShipping(id: string, shippingId: string, shippingRequest: ShippingRequest, acceptLanguage?: OrdersUpdateShippingAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<ShippingOrderResponse>;
};
/**
 * ShippingsApi - interface
 * @export
 * @interface ShippingsApi
 */
export interface ShippingsApiInterface {
    /**
     * Create new shipping for an existing orden
     * @summary Create Shipping
     * @param {string} id Identifier of the resource
     * @param {ShippingRequest} shippingRequest requested field for a shipping
     * @param {OrdersCreateShippingAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingsApiInterface
     */
    ordersCreateShipping(id: string, shippingRequest: ShippingRequest, acceptLanguage?: OrdersCreateShippingAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<ShippingOrderResponse>;
    /**
     * Delete shipping
     * @summary Delete Shipping
     * @param {string} id Identifier of the resource
     * @param {string} shippingId identifier
     * @param {OrdersDeleteShippingAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingsApiInterface
     */
    ordersDeleteShipping(id: string, shippingId: string, acceptLanguage?: OrdersDeleteShippingAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<ShippingOrderResponse>;
    /**
     * Update existing shipping for an existing orden
     * @summary Update Shipping
     * @param {string} id Identifier of the resource
     * @param {string} shippingId identifier
     * @param {ShippingRequest} shippingRequest requested field for a shipping
     * @param {OrdersUpdateShippingAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingsApiInterface
     */
    ordersUpdateShipping(id: string, shippingId: string, shippingRequest: ShippingRequest, acceptLanguage?: OrdersUpdateShippingAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<ShippingOrderResponse>;
}
/**
 * ShippingsApi - object-oriented interface
 * @export
 * @class ShippingsApi
 * @extends {BaseAPI}
 */
export declare class ShippingsApi extends BaseAPI implements ShippingsApiInterface {
    /**
     * Create new shipping for an existing orden
     * @summary Create Shipping
     * @param {string} id Identifier of the resource
     * @param {ShippingRequest} shippingRequest requested field for a shipping
     * @param {OrdersCreateShippingAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingsApi
     */
    ordersCreateShipping(id: string, shippingRequest: ShippingRequest, acceptLanguage?: OrdersCreateShippingAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ShippingOrderResponse, any>>;
    /**
     * Delete shipping
     * @summary Delete Shipping
     * @param {string} id Identifier of the resource
     * @param {string} shippingId identifier
     * @param {OrdersDeleteShippingAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingsApi
     */
    ordersDeleteShipping(id: string, shippingId: string, acceptLanguage?: OrdersDeleteShippingAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ShippingOrderResponse, any>>;
    /**
     * Update existing shipping for an existing orden
     * @summary Update Shipping
     * @param {string} id Identifier of the resource
     * @param {string} shippingId identifier
     * @param {ShippingRequest} shippingRequest requested field for a shipping
     * @param {OrdersUpdateShippingAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingsApi
     */
    ordersUpdateShipping(id: string, shippingId: string, shippingRequest: ShippingRequest, acceptLanguage?: OrdersUpdateShippingAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ShippingOrderResponse, any>>;
}
/**
 * @export
 */
export declare const OrdersCreateShippingAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type OrdersCreateShippingAcceptLanguageEnum = typeof OrdersCreateShippingAcceptLanguageEnum[keyof typeof OrdersCreateShippingAcceptLanguageEnum];
/**
 * @export
 */
export declare const OrdersDeleteShippingAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type OrdersDeleteShippingAcceptLanguageEnum = typeof OrdersDeleteShippingAcceptLanguageEnum[keyof typeof OrdersDeleteShippingAcceptLanguageEnum];
/**
 * @export
 */
export declare const OrdersUpdateShippingAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type OrdersUpdateShippingAcceptLanguageEnum = typeof OrdersUpdateShippingAcceptLanguageEnum[keyof typeof OrdersUpdateShippingAcceptLanguageEnum];
