/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { Token } from '../model';
import { TokenResponse } from '../model';
/**
 * TokensApi - axios parameter creator
 * @export
 */
export declare const TokensApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Generate a payment token, to associate it with a card
     * @summary Create Token
     * @param {Token} token requested field for token
     * @param {CreateTokenAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createToken: (token: Token, acceptLanguage?: CreateTokenAcceptLanguageEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TokensApi - functional programming interface
 * @export
 */
export declare const TokensApiFp: (configuration?: Configuration) => {
    /**
     * Generate a payment token, to associate it with a card
     * @summary Create Token
     * @param {Token} token requested field for token
     * @param {CreateTokenAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createToken(token: Token, acceptLanguage?: CreateTokenAcceptLanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>>;
};
/**
 * TokensApi - factory interface
 * @export
 */
export declare const TokensApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Generate a payment token, to associate it with a card
     * @summary Create Token
     * @param {Token} token requested field for token
     * @param {CreateTokenAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createToken(token: Token, acceptLanguage?: CreateTokenAcceptLanguageEnum, options?: any): AxiosPromise<TokenResponse>;
};
/**
 * TokensApi - interface
 * @export
 * @interface TokensApi
 */
export interface TokensApiInterface {
    /**
     * Generate a payment token, to associate it with a card
     * @summary Create Token
     * @param {Token} token requested field for token
     * @param {CreateTokenAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApiInterface
     */
    createToken(token: Token, acceptLanguage?: CreateTokenAcceptLanguageEnum, options?: RawAxiosRequestConfig): AxiosPromise<TokenResponse>;
}
/**
 * TokensApi - object-oriented interface
 * @export
 * @class TokensApi
 * @extends {BaseAPI}
 */
export declare class TokensApi extends BaseAPI implements TokensApiInterface {
    /**
     * Generate a payment token, to associate it with a card
     * @summary Create Token
     * @param {Token} token requested field for token
     * @param {CreateTokenAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    createToken(token: Token, acceptLanguage?: CreateTokenAcceptLanguageEnum, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TokenResponse, any>>;
}
/**
 * @export
 */
export declare const CreateTokenAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type CreateTokenAcceptLanguageEnum = typeof CreateTokenAcceptLanguageEnum[keyof typeof CreateTokenAcceptLanguageEnum];
