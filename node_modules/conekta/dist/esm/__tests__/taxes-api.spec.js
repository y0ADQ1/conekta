var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { TaxesApi } from "../api";
import { Configuration } from "../configuration";
import { baseTest } from "./base-test";
describe("Taxes API", () => {
    let client;
    beforeAll(() => {
        const config = new Configuration({ accessToken: "key_xxxxxxxx" });
        client = new TaxesApi(config, baseTest.BasePath);
    });
    describe("general", () => {
        it("should be defined", () => {
            expect(client).toBeDefined();
        });
    });
    describe("Order create tax", () => {
        it("should create a tax for an order", () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "ord_2tVyWPnCPWbrV37mW";
            const request = {
                amount: 100,
                description: "test",
                metadata: { key: "value" },
            };
            const response = (yield client.ordersCreateTaxes(id, request)).data;
            expect(response).toBeDefined();
            expect(response.amount).toBe(request.amount);
            expect(response.parent_id).toBe(id);
            expect(response.id).toBeDefined();
        }));
    });
    describe("Order update tax", () => {
        it("should update a tax for an order", () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "ord_2tVyWPnCPWbrV37mW";
            const tax_id = "tax_lin_2tVzVp6AAptCRHhgt";
            const request = {
                amount: 99,
            };
            const response = (yield client.ordersUpdateTaxes(id, tax_id, request)).data;
            expect(response).toBeDefined();
            expect(response.amount).toBe(request.amount);
            expect(response.parent_id).toBe(id);
            expect(response.id).toBe(tax_id);
        }));
    });
    describe("Delete Order Tax", () => {
        it("should delete a tax for an order", () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "ord_2tVyWPnCPWbrV37mW";
            const tax_id = "tax_lin_2tVzVp6AAptCRHhgt";
            const response = (yield client.ordersDeleteTaxes(id, tax_id)).data;
            expect(response).toBeDefined();
            expect(response.id).toBe(tax_id);
        }));
    });
});
