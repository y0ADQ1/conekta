var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { WebhooksApi } from "../api";
import { Configuration } from "../configuration";
import { baseTest } from './base-test';
describe("Webhooks API", () => {
    let client;
    beforeAll(() => {
        const config = new Configuration({ accessToken: "key_xxxxxxxx" });
        client = new WebhooksApi(config, baseTest.BasePath);
    });
    describe("general", () => {
        it("should be defined", () => {
            expect(client).toBeDefined();
        });
    });
    describe("Create Webhook", () => {
        it("should create a webhook", () => __awaiter(void 0, void 0, void 0, function* () {
            const request = {
                url: "https://example.com/webhook",
                synchronous: false
            };
            const response = (yield client.createWebhook(request, "en")).data;
            expect(response).toBeDefined();
            expect(response.id).toEqual("641b1d5662d7e00001eaa46b");
            expect(response.object).toEqual("webhook");
        }));
    });
    describe("Delete Webhook", () => {
        it("should delete a webhook", () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "641b1d5662d7e00001eaa46b";
            const response = (yield client.deleteWebhook(id, "es")).data;
            expect(response).toBeDefined();
            expect(response.id).toEqual(id);
            expect(response.deleted).toBeTruthy();
        }));
    });
    describe("Get webhook", () => {
        it("should get a webhook", () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "641b1d5662d7e00001eaa46b";
            const response = (yield client.getWebhook(id, "es")).data;
            expect(response).toBeDefined();
            expect(response.id).toEqual(id);
            expect(response.object).toEqual("webhook");
        }));
    });
    describe("List webhooks", () => {
        it("should list webhooks", () => __awaiter(void 0, void 0, void 0, function* () {
            const response = (yield client.getWebhooks("es")).data;
            expect(response).toBeDefined();
            expect(response.data.length).toBeGreaterThan(0);
            expect(response.data[0].object).toEqual("webhook");
        }));
    });
    describe("Update webhook", () => {
        it("should update a webhook", () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "641b1d5662d7e00001eaa46b";
            const request = {
                url: "https://example.com/webhook",
                synchronous: false
            };
            const response = (yield client.updateWebhook(id, request, "es")).data;
            expect(response).toBeDefined();
            expect(response.id).toEqual(id);
            expect(response.object).toEqual("webhook");
        }));
    });
    describe("Test webhook", () => {
        it("should Test a webhook", () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "641b1d5662d7e00001eaa46b";
            const response = (yield client.testWebhook(id, "es")).data;
            expect(response).toBeDefined();
            expect(response.id).toEqual(id);
        }));
    });
});
