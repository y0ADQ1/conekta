var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ShippingContactsApi } from "../api";
import { Configuration } from "../configuration";
import { baseTest } from "./base-test";
describe("shipping contacts", () => {
    let client;
    beforeAll(() => {
        const config = new Configuration({ accessToken: "key_xxxxxxxx" });
        client = new ShippingContactsApi(config, baseTest.BasePath);
    });
    describe("general", () => {
        it("should be defined", () => __awaiter(void 0, void 0, void 0, function* () {
            expect(client).toBeDefined();
        }));
    });
    describe("create shipping contact", () => {
        it("should create shipping contact", () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "cus_2tXyF9BwPG14UMkkg";
            const request = {
                address: {
                    street1: "Calle 100",
                    city: "mexico",
                    country: "MX",
                    postal_code: "11000",
                },
                phone: "1234567890",
                receiver: "Juan Perez",
            };
            const response = (yield client.createCustomerShippingContacts(id, request, "es")).data;
            expect(response).toBeDefined();
            expect(response.parent_id).toBe(id);
            expect(response.address.country).not.toStrictEqual(request.address.country);
            expect(response.id).toBeDefined();
            expect(response.created_at).toEqual(1679009479);
        }));
    });
    describe("update shipping contact", () => {
        it("should update shipping contact", () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "cus_2tZWxbTPtQgGJGh8P";
            const shipping_contact_id = "ship_cont_2tZWzJPBf87C6TcoQ";
            const request = {
                phone: "3143145050",
            };
            const response = (yield client.updateCustomerShippingContacts(id, shipping_contact_id, request, "es")).data;
            expect(response).toBeDefined();
            expect(response.parent_id).toBe(id);
            expect(response.id).toBe(shipping_contact_id);
            expect(response.phone).toBe(request.phone);
        }));
    });
    describe("delete shipping contact", () => {
        it("should delete shipping contact", () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "cus_2tZWxbTPtQgGJGh8P";
            const shipping_contact_id = "ship_cont_2tZWzJPBf87C6TcoQ";
            const response = (yield client.deleteCustomerShippingContacts(id, shipping_contact_id, "es")).data;
            expect(response).toBeDefined();
            expect(response.parent_id).toBe(id);
            expect(response.id).toBe(shipping_contact_id);
        }));
    });
});
