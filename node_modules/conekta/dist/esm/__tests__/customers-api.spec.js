var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { CustomersApi } from "../api";
import { Configuration } from "../configuration";
import { baseTest } from './base-test';
describe('CustomersApi', () => {
    let api;
    beforeAll(() => {
        const config = new Configuration({ accessToken: "key_xxxxxxxx" });
        api = new CustomersApi(config, baseTest.BasePath);
    });
    describe("general", () => {
        it('should be defined', () => {
            expect(api).toBeInstanceOf(CustomersApi);
        });
    });
    describe('Create customer', () => {
        it('should return a customer', () => __awaiter(void 0, void 0, void 0, function* () {
            var customer = get_full_customer();
            const customer_response = (yield api.createCustomer(customer)).data;
            expect(customer_response.id).toBeTruthy();
            expect(customer_response.custom_reference).toBe(customer.custom_reference);
            expect(customer_response.fiscal_entities.data).toHaveLength(1);
            expect(customer_response.fiscal_entities.has_more).toBeFalsy();
            expect(customer_response.livemode).toBeTruthy();
        }));
    });
    describe('Create customer Fiscal entities', () => {
        it('should return a customer', () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "cus_2tXyF9BwPG14UMkkg";
            var customer_fiscal_entity = {
                address: {
                    street1: "Calle 123, int 404",
                    city: "Cuauhtémoc",
                    country: "mx",
                    postal_code: "06140",
                    external_number: "404",
                }
            };
            const response = (yield api.createCustomerFiscalEntities(id, customer_fiscal_entity)).data;
            expect(response).toBeDefined();
            expect(response.address.country).toEqual(customer_fiscal_entity.address.country);
            expect(response.parent_id).toEqual(id);
            expect(response.id).toBeTruthy();
        }));
    });
    describe('Delete a customer', () => {
        it('should return a customer', () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "cus_2tXyF9BwPG14UMkkg";
            const response = (yield api.deleteCustomerById(id)).data;
            expect(response).toBeDefined();
            expect(response.id).toEqual(id);
        }));
    });
    describe('getCustomer by id', () => {
        it('should return a customer card', () => __awaiter(void 0, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const id = "cus_2tXx8KUxw6311kEbs";
            const customer = (yield api.getCustomerById(id)).data;
            expect(customer).toBeDefined();
            expect(customer.id).toBe(id);
            expect((_a = customer.payment_sources) === null || _a === void 0 ? void 0 : _a.data).toHaveLength(1);
            expect((_b = customer.payment_sources) === null || _b === void 0 ? void 0 : _b.data[0].type).toBe("card");
            const credit = (_c = customer.payment_sources) === null || _c === void 0 ? void 0 : _c.data[0];
            expect(credit.card_type).toBe("credit");
            expect(customer.subscription).not.toBeNull();
            expect((_d = customer.subscription) === null || _d === void 0 ? void 0 : _d.customer_id).toBe(id);
        }));
        it('should return a customer cash', () => __awaiter(void 0, void 0, void 0, function* () {
            var _e, _f, _g;
            const id = "cus_2rGtVzg5V2KZrKXBh";
            const response = (yield api.getCustomerById(id)).data;
            expect(response).toBeDefined();
            expect(response.id).toBe(id);
            expect((_e = response.payment_sources) === null || _e === void 0 ? void 0 : _e.data).toHaveLength(1);
            expect((_f = response.payment_sources) === null || _f === void 0 ? void 0 : _f.data[0].type).toBe("oxxo_recurrent");
            const cash = (_g = response.payment_sources) === null || _g === void 0 ? void 0 : _g.data[0];
            expect(cash.provider).toBe("Oxxo");
            expect(cash.object).toBe("payment_source");
        }));
        it('should return a customer spei', () => __awaiter(void 0, void 0, void 0, function* () {
            var _h, _j, _k;
            const id = "cus_2tYELwYTKSB5hDXsr";
            const response = (yield api.getCustomerById(id)).data;
            expect(response).toBeDefined();
            expect(response.id).toBe(id);
            expect((_h = response.payment_sources) === null || _h === void 0 ? void 0 : _h.data).toHaveLength(1);
            expect((_j = response.payment_sources) === null || _j === void 0 ? void 0 : _j.data[0].type).toBe("spei_recurrent");
            const transfer = (_k = response.payment_sources) === null || _k === void 0 ? void 0 : _k.data[0];
            expect(transfer.reference).toBe("646180111805035870");
            expect(transfer.object).toBe("payment_source");
            expect(transfer.expires_at).toBe("none");
        }));
    });
    describe('Get customers', () => {
        it('should return a list of customers', () => __awaiter(void 0, void 0, void 0, function* () {
            const limit = 21;
            const response = (yield api.getCustomers("es", undefined, limit)).data;
            expect(response).toBeDefined();
            expect(response.next_page_url).not.toBeNull();
            expect(response.previous_page_url).toBeNull();
            expect(response.has_more).toBeTruthy();
            expect(response.object).toBe("list");
            expect(response.data).toHaveLength(limit);
        }));
        it('should return a list of customers with next ', () => __awaiter(void 0, void 0, void 0, function* () {
            const limit = 22;
            const next = "cus_2sthLBEZRLp2s6GWc";
            var response = (yield api.getCustomers("es", undefined, limit, undefined, next)).data;
            expect(response).toBeDefined();
            expect(response.next_page_url).not.toBeNull();
            expect(response.previous_page_url).not.toBeNull();
            expect(response.has_more).toBeTruthy();
            expect(response.object).toBe("list");
            expect(response.data).toHaveLength(limit);
        }));
        it('should return a list of customers with previous ', () => __awaiter(void 0, void 0, void 0, function* () {
            const limit = 23;
            const previous = "cus_2ss5YAeTKuEr5M4fD";
            var response = (yield api.getCustomers("es", undefined, limit, undefined, previous)).data;
            expect(response).toBeDefined();
            expect(response.next_page_url).not.toBeNull();
            expect(response.previous_page_url).toBeNull();
            expect(response.has_more).toBeTruthy();
            expect(response.object).toBe("list");
        }));
    });
    describe('Update customer', () => {
        it('should return a customer', () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "cus_2tYENskzTjjgkGQLt";
            var update_customer = {
                email: "dotnet@test.com"
            };
            const response = (yield api.updateCustomer(id, update_customer)).data;
            expect(response).toBeDefined();
            expect(response.email).toEqual(update_customer.email);
            expect(response.id).toBe(id);
        }));
    });
    describe('update customer fiscal entities', () => {
        it('should return a customer fiscal entities', () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "cus_2tYENskzTjjgkGQLt";
            const fiscal_entities_id = "fis_ent_2tYENskzTjjgkGQLr";
            var update_customer_fiscal_entity = {
                tax_id: "tax_28764234"
            };
            const response = (yield api.updateCustomerFiscalEntities(id, fiscal_entities_id, update_customer_fiscal_entity)).data;
            expect(response).toBeDefined();
            expect(response.tax_id).toEqual(update_customer_fiscal_entity.tax_id);
            expect(response.parent_id).toEqual(id);
            expect(response.id).toEqual(fiscal_entities_id);
            expect(response.default).toBeTruthy();
            expect(response.object).toBe("fiscal_entity");
        }));
    });
});
function get_full_customer() {
    var fiscal_entities = [{
            address: {
                street1: "Calle 123, int 404",
                street2: "Col. Condesa",
                postal_code: "06140",
                city: "Cuauhtémoc",
                state: "Ciudad de México",
                country: "MX",
                residential: true,
                external_number: "404",
            }
        }];
    var payment_sources = [{
            type: "card",
            token_id: "tok_2tXyExrU6U7yiaTto",
        }];
    var shipping_contacts = [{
            address: {
                street1: "Calle 123, int 404",
                country: "mexico",
                postal_code: "11011",
            },
            phone: "+54874122144",
        }];
    const subscription = {
        plan_id: "plan_2tXx672QLQ68CkmMn",
        card_id: "card_2tXx8KUxw6311kEbs",
        trial_end: 1679321468,
    };
    var customer = {
        name: "Fulanito Pérez",
        phone: "5555555555",
        email: "test@conekta.com",
        corporate: true,
        plan_id: "plan_2tXx672QLQ68CkmMn",
        default_shipping_contact_id: "",
        default_payment_source_id: "",
        custom_reference: "dotnet_12345678",
        fiscal_entities: fiscal_entities,
        payment_sources: payment_sources,
        shipping_contacts: shipping_contacts,
        subscription: subscription
    };
    return customer;
}
