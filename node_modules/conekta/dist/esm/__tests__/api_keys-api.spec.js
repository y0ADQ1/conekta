var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ApiKeysApi } from "../api";
import { Configuration } from "../configuration";
import { baseTest } from './base-test';
describe('api keys', () => {
    let client;
    beforeAll(() => {
        const config = new Configuration({ accessToken: "key_xxxxxxxx" });
        client = new ApiKeysApi(config, baseTest.BasePath);
    });
    describe("general", () => {
        it('should be defined', () => {
            expect(client).toBeDefined();
        });
    });
    describe("create api key", () => {
        it('should return a api key', () => __awaiter(void 0, void 0, void 0, function* () {
            const request = {
                description: "online store",
                role: "private"
            };
            const response = (yield client.createApiKey(request, "es")).data;
            expect(response).toBeDefined();
            expect(response.id).toEqual("64625cc9f3e02c00163f5e4d");
            expect(response.description).toEqual(request.description);
            expect(response.role).toEqual(request.role);
        }));
    });
    describe("get api key", () => {
        it('should return a api key', () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "64625cc9f3e02c00163f5e4d";
            const response = (yield client.getApiKey(id, "es")).data;
            expect(response).toBeDefined();
            expect(response.id).toEqual(id);
            expect(response.description).toEqual("online store");
            expect(response.role).toEqual("private");
        }));
    });
    describe("update api key", () => {
        it('should return a api key', () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "64625cc9f3e02c00163f5e4d";
            const request = {
                active: false,
                description: "online store",
            };
            const response = (yield client.updateApiKey(id, "es", request)).data;
            expect(response).toBeDefined();
            expect(response.id).toEqual(id);
            expect(response.description).toEqual(request.description);
        }));
    });
    describe("delete api key", () => {
        it('should return a api key', () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "64625cc9f3e02c00163f5e4d";
            const response = (yield client.deleteApiKey(id, "es")).data;
            expect(response).toBeDefined();
            expect(response.id).toEqual(id);
            expect(response.description).toEqual("online store");
            expect(response.role).toEqual("private");
        }));
    });
    describe("get api keys", () => {
        it('should return a list api key', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = (yield client.getApiKeys("es", undefined, 20)).data;
            expect(response).toBeDefined();
            expect(response.data.length).toEqual(1);
        }));
    });
    describe("get api key", () => {
        it('should return a api key', () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "64625cc9f3e02c00163f5e4d";
            const response = (yield client.getApiKey(id, "es")).data;
            expect(response).toBeDefined();
            expect(response.id).toEqual(id);
            expect(response.description).toEqual("online store");
            expect(response.role).toEqual("private");
        }));
    });
});
