/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { EventResponse } from '../model';
import { EventsResendResponse } from '../model';
import { GetEventsResponse } from '../model';
/**
 * EventsApi - axios parameter creator
 * @export
 */
export declare const EventsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns a single event
     * @summary Get Event
     * @param {string} id Identifier of the resource
     * @param {GetEventAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvent: (id: string, acceptLanguage?: GetEventAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get list of Events
     * @param {GetEventsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvents: (acceptLanguage?: GetEventsAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Try to send an event
     * @summary Resend Event
     * @param {string} eventId event identifier
     * @param {string} webhookLogId webhook log identifier
     * @param {ResendEventAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendEvent: (eventId: string, webhookLogId: string, acceptLanguage?: ResendEventAcceptLanguageEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EventsApi - functional programming interface
 * @export
 */
export declare const EventsApiFp: (configuration?: Configuration) => {
    /**
     * Returns a single event
     * @summary Get Event
     * @param {string} id Identifier of the resource
     * @param {GetEventAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvent(id: string, acceptLanguage?: GetEventAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventResponse>>;
    /**
     *
     * @summary Get list of Events
     * @param {GetEventsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvents(acceptLanguage?: GetEventsAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEventsResponse>>;
    /**
     * Try to send an event
     * @summary Resend Event
     * @param {string} eventId event identifier
     * @param {string} webhookLogId webhook log identifier
     * @param {ResendEventAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendEvent(eventId: string, webhookLogId: string, acceptLanguage?: ResendEventAcceptLanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventsResendResponse>>;
};
/**
 * EventsApi - factory interface
 * @export
 */
export declare const EventsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns a single event
     * @summary Get Event
     * @param {string} id Identifier of the resource
     * @param {GetEventAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvent(id: string, acceptLanguage?: GetEventAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<EventResponse>;
    /**
     *
     * @summary Get list of Events
     * @param {GetEventsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvents(acceptLanguage?: GetEventsAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: any): AxiosPromise<GetEventsResponse>;
    /**
     * Try to send an event
     * @summary Resend Event
     * @param {string} eventId event identifier
     * @param {string} webhookLogId webhook log identifier
     * @param {ResendEventAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendEvent(eventId: string, webhookLogId: string, acceptLanguage?: ResendEventAcceptLanguageEnum, options?: any): AxiosPromise<EventsResendResponse>;
};
/**
 * EventsApi - interface
 * @export
 * @interface EventsApi
 */
export interface EventsApiInterface {
    /**
     * Returns a single event
     * @summary Get Event
     * @param {string} id Identifier of the resource
     * @param {GetEventAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    getEvent(id: string, acceptLanguage?: GetEventAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<EventResponse>;
    /**
     *
     * @summary Get list of Events
     * @param {GetEventsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    getEvents(acceptLanguage?: GetEventsAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetEventsResponse>;
    /**
     * Try to send an event
     * @summary Resend Event
     * @param {string} eventId event identifier
     * @param {string} webhookLogId webhook log identifier
     * @param {ResendEventAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    resendEvent(eventId: string, webhookLogId: string, acceptLanguage?: ResendEventAcceptLanguageEnum, options?: RawAxiosRequestConfig): AxiosPromise<EventsResendResponse>;
}
/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export declare class EventsApi extends BaseAPI implements EventsApiInterface {
    /**
     * Returns a single event
     * @summary Get Event
     * @param {string} id Identifier of the resource
     * @param {GetEventAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    getEvent(id: string, acceptLanguage?: GetEventAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventResponse, any>>;
    /**
     *
     * @summary Get list of Events
     * @param {GetEventsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    getEvents(acceptLanguage?: GetEventsAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetEventsResponse, any>>;
    /**
     * Try to send an event
     * @summary Resend Event
     * @param {string} eventId event identifier
     * @param {string} webhookLogId webhook log identifier
     * @param {ResendEventAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    resendEvent(eventId: string, webhookLogId: string, acceptLanguage?: ResendEventAcceptLanguageEnum, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventsResendResponse, any>>;
}
/**
 * @export
 */
export declare const GetEventAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type GetEventAcceptLanguageEnum = typeof GetEventAcceptLanguageEnum[keyof typeof GetEventAcceptLanguageEnum];
/**
 * @export
 */
export declare const GetEventsAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type GetEventsAcceptLanguageEnum = typeof GetEventsAcceptLanguageEnum[keyof typeof GetEventsAcceptLanguageEnum];
/**
 * @export
 */
export declare const ResendEventAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type ResendEventAcceptLanguageEnum = typeof ResendEventAcceptLanguageEnum[keyof typeof ResendEventAcceptLanguageEnum];
