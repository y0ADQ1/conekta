/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { GetTransactionsResponse } from '../model';
import { TransactionResponse } from '../model';
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export declare const TransactionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get the details of a transaction
     * @summary Get transaction
     * @param {string} id Identifier of the resource
     * @param {GetTransactionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransaction: (id: string, acceptLanguage?: GetTransactionAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get transaction details in the form of a list
     * @summary Get List transactions
     * @param {GetTransactionsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {string} [id] id of the object to be retrieved
     * @param {string} [chargeId] id of the charge used for filtering
     * @param {string} [type] type of the object to be retrieved
     * @param {string} [currency] currency of the object to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactions: (acceptLanguage?: GetTransactionsAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, next?: string, previous?: string, id?: string, chargeId?: string, type?: string, currency?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TransactionsApi - functional programming interface
 * @export
 */
export declare const TransactionsApiFp: (configuration?: Configuration) => {
    /**
     * Get the details of a transaction
     * @summary Get transaction
     * @param {string} id Identifier of the resource
     * @param {GetTransactionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransaction(id: string, acceptLanguage?: GetTransactionAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionResponse>>;
    /**
     * Get transaction details in the form of a list
     * @summary Get List transactions
     * @param {GetTransactionsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {string} [id] id of the object to be retrieved
     * @param {string} [chargeId] id of the charge used for filtering
     * @param {string} [type] type of the object to be retrieved
     * @param {string} [currency] currency of the object to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactions(acceptLanguage?: GetTransactionsAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, next?: string, previous?: string, id?: string, chargeId?: string, type?: string, currency?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTransactionsResponse>>;
};
/**
 * TransactionsApi - factory interface
 * @export
 */
export declare const TransactionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get the details of a transaction
     * @summary Get transaction
     * @param {string} id Identifier of the resource
     * @param {GetTransactionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransaction(id: string, acceptLanguage?: GetTransactionAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<TransactionResponse>;
    /**
     * Get transaction details in the form of a list
     * @summary Get List transactions
     * @param {GetTransactionsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {string} [id] id of the object to be retrieved
     * @param {string} [chargeId] id of the charge used for filtering
     * @param {string} [type] type of the object to be retrieved
     * @param {string} [currency] currency of the object to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactions(acceptLanguage?: GetTransactionsAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, next?: string, previous?: string, id?: string, chargeId?: string, type?: string, currency?: string, options?: any): AxiosPromise<GetTransactionsResponse>;
};
/**
 * TransactionsApi - interface
 * @export
 * @interface TransactionsApi
 */
export interface TransactionsApiInterface {
    /**
     * Get the details of a transaction
     * @summary Get transaction
     * @param {string} id Identifier of the resource
     * @param {GetTransactionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    getTransaction(id: string, acceptLanguage?: GetTransactionAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<TransactionResponse>;
    /**
     * Get transaction details in the form of a list
     * @summary Get List transactions
     * @param {GetTransactionsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {string} [id] id of the object to be retrieved
     * @param {string} [chargeId] id of the charge used for filtering
     * @param {string} [type] type of the object to be retrieved
     * @param {string} [currency] currency of the object to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    getTransactions(acceptLanguage?: GetTransactionsAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, next?: string, previous?: string, id?: string, chargeId?: string, type?: string, currency?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetTransactionsResponse>;
}
/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export declare class TransactionsApi extends BaseAPI implements TransactionsApiInterface {
    /**
     * Get the details of a transaction
     * @summary Get transaction
     * @param {string} id Identifier of the resource
     * @param {GetTransactionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    getTransaction(id: string, acceptLanguage?: GetTransactionAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TransactionResponse, any>>;
    /**
     * Get transaction details in the form of a list
     * @summary Get List transactions
     * @param {GetTransactionsAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {string} [id] id of the object to be retrieved
     * @param {string} [chargeId] id of the charge used for filtering
     * @param {string} [type] type of the object to be retrieved
     * @param {string} [currency] currency of the object to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    getTransactions(acceptLanguage?: GetTransactionsAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, next?: string, previous?: string, id?: string, chargeId?: string, type?: string, currency?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetTransactionsResponse, any>>;
}
/**
 * @export
 */
export declare const GetTransactionAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type GetTransactionAcceptLanguageEnum = typeof GetTransactionAcceptLanguageEnum[keyof typeof GetTransactionAcceptLanguageEnum];
/**
 * @export
 */
export declare const GetTransactionsAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type GetTransactionsAcceptLanguageEnum = typeof GetTransactionsAcceptLanguageEnum[keyof typeof GetTransactionsAcceptLanguageEnum];
