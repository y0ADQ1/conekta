/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { GetOrdersResponse } from '../model';
import { OrderCaptureRequest } from '../model';
import { OrderRefundRequest } from '../model';
import { OrderRequest } from '../model';
import { OrderResponse } from '../model';
import { OrderUpdateRequest } from '../model';
/**
 * OrdersApi - axios parameter creator
 * @export
 */
export declare const OrdersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Cancel an order that has been previously created.
     * @summary Cancel Order
     * @param {string} id Identifier of the resource
     * @param {CancelOrderAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelOrder: (id: string, acceptLanguage?: CancelOrderAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new order.
     * @summary Create order
     * @param {OrderRequest} orderRequest requested field for order
     * @param {CreateOrderAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrder: (orderRequest: OrderRequest, acceptLanguage?: CreateOrderAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Info for a specific order
     * @summary Get Order
     * @param {string} id Identifier of the resource
     * @param {GetOrderByIdAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrderById: (id: string, acceptLanguage?: GetOrderByIdAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get order details in the form of a list
     * @summary Get a list of Orders
     * @param {GetOrdersAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrders: (acceptLanguage?: GetOrdersAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * A refunded order describes the items, amount, and reason an order is being refunded.
     * @summary Cancel Refund
     * @param {string} id Identifier of the resource
     * @param {string} refundId refund identifier
     * @param {OrderCancelRefundAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderCancelRefund: (id: string, refundId: string, acceptLanguage?: OrderCancelRefundAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * A refunded order describes the items, amount, and reason an order is being refunded.
     * @summary Refund Order
     * @param {string} id Identifier of the resource
     * @param {OrderRefundRequest} orderRefundRequest requested field for a refund
     * @param {OrderRefundAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderRefund: (id: string, orderRefundRequest: OrderRefundRequest, acceptLanguage?: OrderRefundAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Processes an order that has been previously authorized.
     * @summary Capture Order
     * @param {string} id Identifier of the resource
     * @param {OrdersCreateCaptureAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {OrderCaptureRequest} [orderCaptureRequest] requested fields for capture order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersCreateCapture: (id: string, acceptLanguage?: OrdersCreateCaptureAcceptLanguageEnum, xChildCompanyId?: string, orderCaptureRequest?: OrderCaptureRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing Order.
     * @summary Update Order
     * @param {string} id Identifier of the resource
     * @param {OrderUpdateRequest} orderUpdateRequest requested field for an order
     * @param {UpdateOrderAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrder: (id: string, orderUpdateRequest: OrderUpdateRequest, acceptLanguage?: UpdateOrderAcceptLanguageEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OrdersApi - functional programming interface
 * @export
 */
export declare const OrdersApiFp: (configuration?: Configuration) => {
    /**
     * Cancel an order that has been previously created.
     * @summary Cancel Order
     * @param {string} id Identifier of the resource
     * @param {CancelOrderAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelOrder(id: string, acceptLanguage?: CancelOrderAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>>;
    /**
     * Create a new order.
     * @summary Create order
     * @param {OrderRequest} orderRequest requested field for order
     * @param {CreateOrderAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrder(orderRequest: OrderRequest, acceptLanguage?: CreateOrderAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>>;
    /**
     * Info for a specific order
     * @summary Get Order
     * @param {string} id Identifier of the resource
     * @param {GetOrderByIdAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrderById(id: string, acceptLanguage?: GetOrderByIdAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>>;
    /**
     * Get order details in the form of a list
     * @summary Get a list of Orders
     * @param {GetOrdersAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrders(acceptLanguage?: GetOrdersAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrdersResponse>>;
    /**
     * A refunded order describes the items, amount, and reason an order is being refunded.
     * @summary Cancel Refund
     * @param {string} id Identifier of the resource
     * @param {string} refundId refund identifier
     * @param {OrderCancelRefundAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderCancelRefund(id: string, refundId: string, acceptLanguage?: OrderCancelRefundAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>>;
    /**
     * A refunded order describes the items, amount, and reason an order is being refunded.
     * @summary Refund Order
     * @param {string} id Identifier of the resource
     * @param {OrderRefundRequest} orderRefundRequest requested field for a refund
     * @param {OrderRefundAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderRefund(id: string, orderRefundRequest: OrderRefundRequest, acceptLanguage?: OrderRefundAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>>;
    /**
     * Processes an order that has been previously authorized.
     * @summary Capture Order
     * @param {string} id Identifier of the resource
     * @param {OrdersCreateCaptureAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {OrderCaptureRequest} [orderCaptureRequest] requested fields for capture order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersCreateCapture(id: string, acceptLanguage?: OrdersCreateCaptureAcceptLanguageEnum, xChildCompanyId?: string, orderCaptureRequest?: OrderCaptureRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>>;
    /**
     * Update an existing Order.
     * @summary Update Order
     * @param {string} id Identifier of the resource
     * @param {OrderUpdateRequest} orderUpdateRequest requested field for an order
     * @param {UpdateOrderAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrder(id: string, orderUpdateRequest: OrderUpdateRequest, acceptLanguage?: UpdateOrderAcceptLanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>>;
};
/**
 * OrdersApi - factory interface
 * @export
 */
export declare const OrdersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Cancel an order that has been previously created.
     * @summary Cancel Order
     * @param {string} id Identifier of the resource
     * @param {CancelOrderAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelOrder(id: string, acceptLanguage?: CancelOrderAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Create a new order.
     * @summary Create order
     * @param {OrderRequest} orderRequest requested field for order
     * @param {CreateOrderAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrder(orderRequest: OrderRequest, acceptLanguage?: CreateOrderAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Info for a specific order
     * @summary Get Order
     * @param {string} id Identifier of the resource
     * @param {GetOrderByIdAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrderById(id: string, acceptLanguage?: GetOrderByIdAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Get order details in the form of a list
     * @summary Get a list of Orders
     * @param {GetOrdersAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrders(acceptLanguage?: GetOrdersAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: any): AxiosPromise<GetOrdersResponse>;
    /**
     * A refunded order describes the items, amount, and reason an order is being refunded.
     * @summary Cancel Refund
     * @param {string} id Identifier of the resource
     * @param {string} refundId refund identifier
     * @param {OrderCancelRefundAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderCancelRefund(id: string, refundId: string, acceptLanguage?: OrderCancelRefundAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<OrderResponse>;
    /**
     * A refunded order describes the items, amount, and reason an order is being refunded.
     * @summary Refund Order
     * @param {string} id Identifier of the resource
     * @param {OrderRefundRequest} orderRefundRequest requested field for a refund
     * @param {OrderRefundAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderRefund(id: string, orderRefundRequest: OrderRefundRequest, acceptLanguage?: OrderRefundAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Processes an order that has been previously authorized.
     * @summary Capture Order
     * @param {string} id Identifier of the resource
     * @param {OrdersCreateCaptureAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {OrderCaptureRequest} [orderCaptureRequest] requested fields for capture order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersCreateCapture(id: string, acceptLanguage?: OrdersCreateCaptureAcceptLanguageEnum, xChildCompanyId?: string, orderCaptureRequest?: OrderCaptureRequest, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Update an existing Order.
     * @summary Update Order
     * @param {string} id Identifier of the resource
     * @param {OrderUpdateRequest} orderUpdateRequest requested field for an order
     * @param {UpdateOrderAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrder(id: string, orderUpdateRequest: OrderUpdateRequest, acceptLanguage?: UpdateOrderAcceptLanguageEnum, options?: any): AxiosPromise<OrderResponse>;
};
/**
 * OrdersApi - interface
 * @export
 * @interface OrdersApi
 */
export interface OrdersApiInterface {
    /**
     * Cancel an order that has been previously created.
     * @summary Cancel Order
     * @param {string} id Identifier of the resource
     * @param {CancelOrderAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    cancelOrder(id: string, acceptLanguage?: CancelOrderAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponse>;
    /**
     * Create a new order.
     * @summary Create order
     * @param {OrderRequest} orderRequest requested field for order
     * @param {CreateOrderAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    createOrder(orderRequest: OrderRequest, acceptLanguage?: CreateOrderAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponse>;
    /**
     * Info for a specific order
     * @summary Get Order
     * @param {string} id Identifier of the resource
     * @param {GetOrderByIdAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    getOrderById(id: string, acceptLanguage?: GetOrderByIdAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponse>;
    /**
     * Get order details in the form of a list
     * @summary Get a list of Orders
     * @param {GetOrdersAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    getOrders(acceptLanguage?: GetOrdersAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetOrdersResponse>;
    /**
     * A refunded order describes the items, amount, and reason an order is being refunded.
     * @summary Cancel Refund
     * @param {string} id Identifier of the resource
     * @param {string} refundId refund identifier
     * @param {OrderCancelRefundAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    orderCancelRefund(id: string, refundId: string, acceptLanguage?: OrderCancelRefundAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponse>;
    /**
     * A refunded order describes the items, amount, and reason an order is being refunded.
     * @summary Refund Order
     * @param {string} id Identifier of the resource
     * @param {OrderRefundRequest} orderRefundRequest requested field for a refund
     * @param {OrderRefundAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    orderRefund(id: string, orderRefundRequest: OrderRefundRequest, acceptLanguage?: OrderRefundAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponse>;
    /**
     * Processes an order that has been previously authorized.
     * @summary Capture Order
     * @param {string} id Identifier of the resource
     * @param {OrdersCreateCaptureAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {OrderCaptureRequest} [orderCaptureRequest] requested fields for capture order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    ordersCreateCapture(id: string, acceptLanguage?: OrdersCreateCaptureAcceptLanguageEnum, xChildCompanyId?: string, orderCaptureRequest?: OrderCaptureRequest, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponse>;
    /**
     * Update an existing Order.
     * @summary Update Order
     * @param {string} id Identifier of the resource
     * @param {OrderUpdateRequest} orderUpdateRequest requested field for an order
     * @param {UpdateOrderAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    updateOrder(id: string, orderUpdateRequest: OrderUpdateRequest, acceptLanguage?: UpdateOrderAcceptLanguageEnum, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponse>;
}
/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export declare class OrdersApi extends BaseAPI implements OrdersApiInterface {
    /**
     * Cancel an order that has been previously created.
     * @summary Cancel Order
     * @param {string} id Identifier of the resource
     * @param {CancelOrderAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    cancelOrder(id: string, acceptLanguage?: CancelOrderAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OrderResponse, any>>;
    /**
     * Create a new order.
     * @summary Create order
     * @param {OrderRequest} orderRequest requested field for order
     * @param {CreateOrderAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    createOrder(orderRequest: OrderRequest, acceptLanguage?: CreateOrderAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OrderResponse, any>>;
    /**
     * Info for a specific order
     * @summary Get Order
     * @param {string} id Identifier of the resource
     * @param {GetOrderByIdAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrderById(id: string, acceptLanguage?: GetOrderByIdAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OrderResponse, any>>;
    /**
     * Get order details in the form of a list
     * @summary Get a list of Orders
     * @param {GetOrdersAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrders(acceptLanguage?: GetOrdersAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetOrdersResponse, any>>;
    /**
     * A refunded order describes the items, amount, and reason an order is being refunded.
     * @summary Cancel Refund
     * @param {string} id Identifier of the resource
     * @param {string} refundId refund identifier
     * @param {OrderCancelRefundAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    orderCancelRefund(id: string, refundId: string, acceptLanguage?: OrderCancelRefundAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OrderResponse, any>>;
    /**
     * A refunded order describes the items, amount, and reason an order is being refunded.
     * @summary Refund Order
     * @param {string} id Identifier of the resource
     * @param {OrderRefundRequest} orderRefundRequest requested field for a refund
     * @param {OrderRefundAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    orderRefund(id: string, orderRefundRequest: OrderRefundRequest, acceptLanguage?: OrderRefundAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OrderResponse, any>>;
    /**
     * Processes an order that has been previously authorized.
     * @summary Capture Order
     * @param {string} id Identifier of the resource
     * @param {OrdersCreateCaptureAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {OrderCaptureRequest} [orderCaptureRequest] requested fields for capture order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    ordersCreateCapture(id: string, acceptLanguage?: OrdersCreateCaptureAcceptLanguageEnum, xChildCompanyId?: string, orderCaptureRequest?: OrderCaptureRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OrderResponse, any>>;
    /**
     * Update an existing Order.
     * @summary Update Order
     * @param {string} id Identifier of the resource
     * @param {OrderUpdateRequest} orderUpdateRequest requested field for an order
     * @param {UpdateOrderAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    updateOrder(id: string, orderUpdateRequest: OrderUpdateRequest, acceptLanguage?: UpdateOrderAcceptLanguageEnum, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OrderResponse, any>>;
}
/**
 * @export
 */
export declare const CancelOrderAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type CancelOrderAcceptLanguageEnum = typeof CancelOrderAcceptLanguageEnum[keyof typeof CancelOrderAcceptLanguageEnum];
/**
 * @export
 */
export declare const CreateOrderAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type CreateOrderAcceptLanguageEnum = typeof CreateOrderAcceptLanguageEnum[keyof typeof CreateOrderAcceptLanguageEnum];
/**
 * @export
 */
export declare const GetOrderByIdAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type GetOrderByIdAcceptLanguageEnum = typeof GetOrderByIdAcceptLanguageEnum[keyof typeof GetOrderByIdAcceptLanguageEnum];
/**
 * @export
 */
export declare const GetOrdersAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type GetOrdersAcceptLanguageEnum = typeof GetOrdersAcceptLanguageEnum[keyof typeof GetOrdersAcceptLanguageEnum];
/**
 * @export
 */
export declare const OrderCancelRefundAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type OrderCancelRefundAcceptLanguageEnum = typeof OrderCancelRefundAcceptLanguageEnum[keyof typeof OrderCancelRefundAcceptLanguageEnum];
/**
 * @export
 */
export declare const OrderRefundAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type OrderRefundAcceptLanguageEnum = typeof OrderRefundAcceptLanguageEnum[keyof typeof OrderRefundAcceptLanguageEnum];
/**
 * @export
 */
export declare const OrdersCreateCaptureAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type OrdersCreateCaptureAcceptLanguageEnum = typeof OrdersCreateCaptureAcceptLanguageEnum[keyof typeof OrdersCreateCaptureAcceptLanguageEnum];
/**
 * @export
 */
export declare const UpdateOrderAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type UpdateOrderAcceptLanguageEnum = typeof UpdateOrderAcceptLanguageEnum[keyof typeof UpdateOrderAcceptLanguageEnum];
