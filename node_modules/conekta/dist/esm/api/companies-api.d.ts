/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { CompanyResponse } from '../model';
import { GetCompaniesResponse } from '../model';
/**
 * CompaniesApi - axios parameter creator
 * @export
 */
export declare const CompaniesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Consume the list of child companies.  This is used for holding companies with several child entities.
     * @summary Get List of Companies
     * @param {GetCompaniesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCompanies: (acceptLanguage?: GetCompaniesAcceptLanguageEnum, limit?: number, search?: string, next?: string, previous?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Company
     * @param {string} id Identifier of the resource
     * @param {GetCompanyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCompany: (id: string, acceptLanguage?: GetCompanyAcceptLanguageEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CompaniesApi - functional programming interface
 * @export
 */
export declare const CompaniesApiFp: (configuration?: Configuration) => {
    /**
     * Consume the list of child companies.  This is used for holding companies with several child entities.
     * @summary Get List of Companies
     * @param {GetCompaniesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCompanies(acceptLanguage?: GetCompaniesAcceptLanguageEnum, limit?: number, search?: string, next?: string, previous?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCompaniesResponse>>;
    /**
     *
     * @summary Get Company
     * @param {string} id Identifier of the resource
     * @param {GetCompanyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCompany(id: string, acceptLanguage?: GetCompanyAcceptLanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyResponse>>;
};
/**
 * CompaniesApi - factory interface
 * @export
 */
export declare const CompaniesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Consume the list of child companies.  This is used for holding companies with several child entities.
     * @summary Get List of Companies
     * @param {GetCompaniesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCompanies(acceptLanguage?: GetCompaniesAcceptLanguageEnum, limit?: number, search?: string, next?: string, previous?: string, options?: any): AxiosPromise<GetCompaniesResponse>;
    /**
     *
     * @summary Get Company
     * @param {string} id Identifier of the resource
     * @param {GetCompanyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCompany(id: string, acceptLanguage?: GetCompanyAcceptLanguageEnum, options?: any): AxiosPromise<CompanyResponse>;
};
/**
 * CompaniesApi - interface
 * @export
 * @interface CompaniesApi
 */
export interface CompaniesApiInterface {
    /**
     * Consume the list of child companies.  This is used for holding companies with several child entities.
     * @summary Get List of Companies
     * @param {GetCompaniesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiInterface
     */
    getCompanies(acceptLanguage?: GetCompaniesAcceptLanguageEnum, limit?: number, search?: string, next?: string, previous?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetCompaniesResponse>;
    /**
     *
     * @summary Get Company
     * @param {string} id Identifier of the resource
     * @param {GetCompanyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiInterface
     */
    getCompany(id: string, acceptLanguage?: GetCompanyAcceptLanguageEnum, options?: RawAxiosRequestConfig): AxiosPromise<CompanyResponse>;
}
/**
 * CompaniesApi - object-oriented interface
 * @export
 * @class CompaniesApi
 * @extends {BaseAPI}
 */
export declare class CompaniesApi extends BaseAPI implements CompaniesApiInterface {
    /**
     * Consume the list of child companies.  This is used for holding companies with several child entities.
     * @summary Get List of Companies
     * @param {GetCompaniesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    getCompanies(acceptLanguage?: GetCompaniesAcceptLanguageEnum, limit?: number, search?: string, next?: string, previous?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetCompaniesResponse, any>>;
    /**
     *
     * @summary Get Company
     * @param {string} id Identifier of the resource
     * @param {GetCompanyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    getCompany(id: string, acceptLanguage?: GetCompanyAcceptLanguageEnum, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CompanyResponse, any>>;
}
/**
 * @export
 */
export declare const GetCompaniesAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type GetCompaniesAcceptLanguageEnum = typeof GetCompaniesAcceptLanguageEnum[keyof typeof GetCompaniesAcceptLanguageEnum];
/**
 * @export
 */
export declare const GetCompanyAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type GetCompanyAcceptLanguageEnum = typeof GetCompanyAcceptLanguageEnum[keyof typeof GetCompanyAcceptLanguageEnum];
