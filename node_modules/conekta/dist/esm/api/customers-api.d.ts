/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { CreateCustomerFiscalEntitiesResponse } from '../model';
import { Customer } from '../model';
import { CustomerFiscalEntitiesRequest } from '../model';
import { CustomerResponse } from '../model';
import { CustomerUpdateFiscalEntitiesRequest } from '../model';
import { CustomersResponse } from '../model';
import { UpdateCustomer } from '../model';
import { UpdateCustomerFiscalEntitiesResponse } from '../model';
/**
 * CustomersApi - axios parameter creator
 * @export
 */
export declare const CustomersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. Remember the credit and debit card tokenization process: [https://developers.conekta.com/page/web-checkout-tokenizer](https://developers.conekta.com/page/web-checkout-tokenizer)
     * @summary Create customer
     * @param {Customer} customer requested field for customer
     * @param {CreateCustomerAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer: (customer: Customer, acceptLanguage?: CreateCustomerAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create Fiscal entity resource that corresponds to a customer ID.
     * @summary Create Fiscal Entity
     * @param {string} id Identifier of the resource
     * @param {CustomerFiscalEntitiesRequest} customerFiscalEntitiesRequest requested field for customer fiscal entities
     * @param {CreateCustomerFiscalEntitiesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerFiscalEntities: (id: string, customerFiscalEntitiesRequest: CustomerFiscalEntitiesRequest, acceptLanguage?: CreateCustomerFiscalEntitiesAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deleted a customer resource that corresponds to a customer ID.
     * @summary Delete Customer
     * @param {string} id Identifier of the resource
     * @param {DeleteCustomerByIdAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomerById: (id: string, acceptLanguage?: DeleteCustomerByIdAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a customer resource that corresponds to a customer ID.
     * @summary Get Customer
     * @param {string} id Identifier of the resource
     * @param {GetCustomerByIdAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerById: (id: string, acceptLanguage?: GetCustomerByIdAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
     * @summary Get a list of customers
     * @param {GetCustomersAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomers: (acceptLanguage?: GetCustomersAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * You can update customer-related data
     * @summary Update customer
     * @param {string} id Identifier of the resource
     * @param {UpdateCustomer} updateCustomer requested field for customer
     * @param {UpdateCustomerAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomer: (id: string, updateCustomer: UpdateCustomer, acceptLanguage?: UpdateCustomerAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update Fiscal Entity resource that corresponds to a customer ID.
     * @summary Update  Fiscal Entity
     * @param {string} id Identifier of the resource
     * @param {string} fiscalEntitiesId identifier
     * @param {CustomerUpdateFiscalEntitiesRequest} customerUpdateFiscalEntitiesRequest requested field for customer update fiscal entities
     * @param {UpdateCustomerFiscalEntitiesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerFiscalEntities: (id: string, fiscalEntitiesId: string, customerUpdateFiscalEntitiesRequest: CustomerUpdateFiscalEntitiesRequest, acceptLanguage?: UpdateCustomerFiscalEntitiesAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CustomersApi - functional programming interface
 * @export
 */
export declare const CustomersApiFp: (configuration?: Configuration) => {
    /**
     * The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. Remember the credit and debit card tokenization process: [https://developers.conekta.com/page/web-checkout-tokenizer](https://developers.conekta.com/page/web-checkout-tokenizer)
     * @summary Create customer
     * @param {Customer} customer requested field for customer
     * @param {CreateCustomerAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer(customer: Customer, acceptLanguage?: CreateCustomerAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerResponse>>;
    /**
     * Create Fiscal entity resource that corresponds to a customer ID.
     * @summary Create Fiscal Entity
     * @param {string} id Identifier of the resource
     * @param {CustomerFiscalEntitiesRequest} customerFiscalEntitiesRequest requested field for customer fiscal entities
     * @param {CreateCustomerFiscalEntitiesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerFiscalEntities(id: string, customerFiscalEntitiesRequest: CustomerFiscalEntitiesRequest, acceptLanguage?: CreateCustomerFiscalEntitiesAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCustomerFiscalEntitiesResponse>>;
    /**
     * Deleted a customer resource that corresponds to a customer ID.
     * @summary Delete Customer
     * @param {string} id Identifier of the resource
     * @param {DeleteCustomerByIdAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomerById(id: string, acceptLanguage?: DeleteCustomerByIdAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerResponse>>;
    /**
     * Gets a customer resource that corresponds to a customer ID.
     * @summary Get Customer
     * @param {string} id Identifier of the resource
     * @param {GetCustomerByIdAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerById(id: string, acceptLanguage?: GetCustomerByIdAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerResponse>>;
    /**
     * The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
     * @summary Get a list of customers
     * @param {GetCustomersAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomers(acceptLanguage?: GetCustomersAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomersResponse>>;
    /**
     * You can update customer-related data
     * @summary Update customer
     * @param {string} id Identifier of the resource
     * @param {UpdateCustomer} updateCustomer requested field for customer
     * @param {UpdateCustomerAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomer(id: string, updateCustomer: UpdateCustomer, acceptLanguage?: UpdateCustomerAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerResponse>>;
    /**
     * Update Fiscal Entity resource that corresponds to a customer ID.
     * @summary Update  Fiscal Entity
     * @param {string} id Identifier of the resource
     * @param {string} fiscalEntitiesId identifier
     * @param {CustomerUpdateFiscalEntitiesRequest} customerUpdateFiscalEntitiesRequest requested field for customer update fiscal entities
     * @param {UpdateCustomerFiscalEntitiesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerFiscalEntities(id: string, fiscalEntitiesId: string, customerUpdateFiscalEntitiesRequest: CustomerUpdateFiscalEntitiesRequest, acceptLanguage?: UpdateCustomerFiscalEntitiesAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCustomerFiscalEntitiesResponse>>;
};
/**
 * CustomersApi - factory interface
 * @export
 */
export declare const CustomersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. Remember the credit and debit card tokenization process: [https://developers.conekta.com/page/web-checkout-tokenizer](https://developers.conekta.com/page/web-checkout-tokenizer)
     * @summary Create customer
     * @param {Customer} customer requested field for customer
     * @param {CreateCustomerAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer(customer: Customer, acceptLanguage?: CreateCustomerAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<CustomerResponse>;
    /**
     * Create Fiscal entity resource that corresponds to a customer ID.
     * @summary Create Fiscal Entity
     * @param {string} id Identifier of the resource
     * @param {CustomerFiscalEntitiesRequest} customerFiscalEntitiesRequest requested field for customer fiscal entities
     * @param {CreateCustomerFiscalEntitiesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerFiscalEntities(id: string, customerFiscalEntitiesRequest: CustomerFiscalEntitiesRequest, acceptLanguage?: CreateCustomerFiscalEntitiesAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<CreateCustomerFiscalEntitiesResponse>;
    /**
     * Deleted a customer resource that corresponds to a customer ID.
     * @summary Delete Customer
     * @param {string} id Identifier of the resource
     * @param {DeleteCustomerByIdAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomerById(id: string, acceptLanguage?: DeleteCustomerByIdAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<CustomerResponse>;
    /**
     * Gets a customer resource that corresponds to a customer ID.
     * @summary Get Customer
     * @param {string} id Identifier of the resource
     * @param {GetCustomerByIdAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerById(id: string, acceptLanguage?: GetCustomerByIdAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<CustomerResponse>;
    /**
     * The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
     * @summary Get a list of customers
     * @param {GetCustomersAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomers(acceptLanguage?: GetCustomersAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: any): AxiosPromise<CustomersResponse>;
    /**
     * You can update customer-related data
     * @summary Update customer
     * @param {string} id Identifier of the resource
     * @param {UpdateCustomer} updateCustomer requested field for customer
     * @param {UpdateCustomerAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomer(id: string, updateCustomer: UpdateCustomer, acceptLanguage?: UpdateCustomerAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<CustomerResponse>;
    /**
     * Update Fiscal Entity resource that corresponds to a customer ID.
     * @summary Update  Fiscal Entity
     * @param {string} id Identifier of the resource
     * @param {string} fiscalEntitiesId identifier
     * @param {CustomerUpdateFiscalEntitiesRequest} customerUpdateFiscalEntitiesRequest requested field for customer update fiscal entities
     * @param {UpdateCustomerFiscalEntitiesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerFiscalEntities(id: string, fiscalEntitiesId: string, customerUpdateFiscalEntitiesRequest: CustomerUpdateFiscalEntitiesRequest, acceptLanguage?: UpdateCustomerFiscalEntitiesAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<UpdateCustomerFiscalEntitiesResponse>;
};
/**
 * CustomersApi - interface
 * @export
 * @interface CustomersApi
 */
export interface CustomersApiInterface {
    /**
     * The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. Remember the credit and debit card tokenization process: [https://developers.conekta.com/page/web-checkout-tokenizer](https://developers.conekta.com/page/web-checkout-tokenizer)
     * @summary Create customer
     * @param {Customer} customer requested field for customer
     * @param {CreateCustomerAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiInterface
     */
    createCustomer(customer: Customer, acceptLanguage?: CreateCustomerAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<CustomerResponse>;
    /**
     * Create Fiscal entity resource that corresponds to a customer ID.
     * @summary Create Fiscal Entity
     * @param {string} id Identifier of the resource
     * @param {CustomerFiscalEntitiesRequest} customerFiscalEntitiesRequest requested field for customer fiscal entities
     * @param {CreateCustomerFiscalEntitiesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiInterface
     */
    createCustomerFiscalEntities(id: string, customerFiscalEntitiesRequest: CustomerFiscalEntitiesRequest, acceptLanguage?: CreateCustomerFiscalEntitiesAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<CreateCustomerFiscalEntitiesResponse>;
    /**
     * Deleted a customer resource that corresponds to a customer ID.
     * @summary Delete Customer
     * @param {string} id Identifier of the resource
     * @param {DeleteCustomerByIdAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiInterface
     */
    deleteCustomerById(id: string, acceptLanguage?: DeleteCustomerByIdAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<CustomerResponse>;
    /**
     * Gets a customer resource that corresponds to a customer ID.
     * @summary Get Customer
     * @param {string} id Identifier of the resource
     * @param {GetCustomerByIdAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiInterface
     */
    getCustomerById(id: string, acceptLanguage?: GetCustomerByIdAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<CustomerResponse>;
    /**
     * The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
     * @summary Get a list of customers
     * @param {GetCustomersAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiInterface
     */
    getCustomers(acceptLanguage?: GetCustomersAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: RawAxiosRequestConfig): AxiosPromise<CustomersResponse>;
    /**
     * You can update customer-related data
     * @summary Update customer
     * @param {string} id Identifier of the resource
     * @param {UpdateCustomer} updateCustomer requested field for customer
     * @param {UpdateCustomerAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiInterface
     */
    updateCustomer(id: string, updateCustomer: UpdateCustomer, acceptLanguage?: UpdateCustomerAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<CustomerResponse>;
    /**
     * Update Fiscal Entity resource that corresponds to a customer ID.
     * @summary Update  Fiscal Entity
     * @param {string} id Identifier of the resource
     * @param {string} fiscalEntitiesId identifier
     * @param {CustomerUpdateFiscalEntitiesRequest} customerUpdateFiscalEntitiesRequest requested field for customer update fiscal entities
     * @param {UpdateCustomerFiscalEntitiesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiInterface
     */
    updateCustomerFiscalEntities(id: string, fiscalEntitiesId: string, customerUpdateFiscalEntitiesRequest: CustomerUpdateFiscalEntitiesRequest, acceptLanguage?: UpdateCustomerFiscalEntitiesAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<UpdateCustomerFiscalEntitiesResponse>;
}
/**
 * CustomersApi - object-oriented interface
 * @export
 * @class CustomersApi
 * @extends {BaseAPI}
 */
export declare class CustomersApi extends BaseAPI implements CustomersApiInterface {
    /**
     * The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. Remember the credit and debit card tokenization process: [https://developers.conekta.com/page/web-checkout-tokenizer](https://developers.conekta.com/page/web-checkout-tokenizer)
     * @summary Create customer
     * @param {Customer} customer requested field for customer
     * @param {CreateCustomerAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    createCustomer(customer: Customer, acceptLanguage?: CreateCustomerAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomerResponse, any>>;
    /**
     * Create Fiscal entity resource that corresponds to a customer ID.
     * @summary Create Fiscal Entity
     * @param {string} id Identifier of the resource
     * @param {CustomerFiscalEntitiesRequest} customerFiscalEntitiesRequest requested field for customer fiscal entities
     * @param {CreateCustomerFiscalEntitiesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    createCustomerFiscalEntities(id: string, customerFiscalEntitiesRequest: CustomerFiscalEntitiesRequest, acceptLanguage?: CreateCustomerFiscalEntitiesAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateCustomerFiscalEntitiesResponse, any>>;
    /**
     * Deleted a customer resource that corresponds to a customer ID.
     * @summary Delete Customer
     * @param {string} id Identifier of the resource
     * @param {DeleteCustomerByIdAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    deleteCustomerById(id: string, acceptLanguage?: DeleteCustomerByIdAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomerResponse, any>>;
    /**
     * Gets a customer resource that corresponds to a customer ID.
     * @summary Get Customer
     * @param {string} id Identifier of the resource
     * @param {GetCustomerByIdAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    getCustomerById(id: string, acceptLanguage?: GetCustomerByIdAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomerResponse, any>>;
    /**
     * The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
     * @summary Get a list of customers
     * @param {GetCustomersAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    getCustomers(acceptLanguage?: GetCustomersAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomersResponse, any>>;
    /**
     * You can update customer-related data
     * @summary Update customer
     * @param {string} id Identifier of the resource
     * @param {UpdateCustomer} updateCustomer requested field for customer
     * @param {UpdateCustomerAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    updateCustomer(id: string, updateCustomer: UpdateCustomer, acceptLanguage?: UpdateCustomerAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomerResponse, any>>;
    /**
     * Update Fiscal Entity resource that corresponds to a customer ID.
     * @summary Update  Fiscal Entity
     * @param {string} id Identifier of the resource
     * @param {string} fiscalEntitiesId identifier
     * @param {CustomerUpdateFiscalEntitiesRequest} customerUpdateFiscalEntitiesRequest requested field for customer update fiscal entities
     * @param {UpdateCustomerFiscalEntitiesAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    updateCustomerFiscalEntities(id: string, fiscalEntitiesId: string, customerUpdateFiscalEntitiesRequest: CustomerUpdateFiscalEntitiesRequest, acceptLanguage?: UpdateCustomerFiscalEntitiesAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateCustomerFiscalEntitiesResponse, any>>;
}
/**
 * @export
 */
export declare const CreateCustomerAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type CreateCustomerAcceptLanguageEnum = typeof CreateCustomerAcceptLanguageEnum[keyof typeof CreateCustomerAcceptLanguageEnum];
/**
 * @export
 */
export declare const CreateCustomerFiscalEntitiesAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type CreateCustomerFiscalEntitiesAcceptLanguageEnum = typeof CreateCustomerFiscalEntitiesAcceptLanguageEnum[keyof typeof CreateCustomerFiscalEntitiesAcceptLanguageEnum];
/**
 * @export
 */
export declare const DeleteCustomerByIdAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type DeleteCustomerByIdAcceptLanguageEnum = typeof DeleteCustomerByIdAcceptLanguageEnum[keyof typeof DeleteCustomerByIdAcceptLanguageEnum];
/**
 * @export
 */
export declare const GetCustomerByIdAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type GetCustomerByIdAcceptLanguageEnum = typeof GetCustomerByIdAcceptLanguageEnum[keyof typeof GetCustomerByIdAcceptLanguageEnum];
/**
 * @export
 */
export declare const GetCustomersAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type GetCustomersAcceptLanguageEnum = typeof GetCustomersAcceptLanguageEnum[keyof typeof GetCustomersAcceptLanguageEnum];
/**
 * @export
 */
export declare const UpdateCustomerAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type UpdateCustomerAcceptLanguageEnum = typeof UpdateCustomerAcceptLanguageEnum[keyof typeof UpdateCustomerAcceptLanguageEnum];
/**
 * @export
 */
export declare const UpdateCustomerFiscalEntitiesAcceptLanguageEnum: {
    readonly es: "es";
    readonly en: "en";
};
export type UpdateCustomerFiscalEntitiesAcceptLanguageEnum = typeof UpdateCustomerFiscalEntitiesAcceptLanguageEnum[keyof typeof UpdateCustomerFiscalEntitiesAcceptLanguageEnum];
