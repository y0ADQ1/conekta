/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from '../base';
/**
 * SubscriptionsApi - axios parameter creator
 * @export
 */
export const SubscriptionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * You can cancel the subscription to stop the plans that your customers consume
         * @summary Cancel Subscription
         * @param {string} id Identifier of the resource
         * @param {CancelSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSubscription: (id_1, acceptLanguage_1, xChildCompanyId_1, ...args_1) => __awaiter(this, [id_1, acceptLanguage_1, xChildCompanyId_1, ...args_1], void 0, function* (id, acceptLanguage, xChildCompanyId, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cancelSubscription', 'id', id);
            const localVarPath = `/customers/{id}/subscription/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }
            if (xChildCompanyId != null) {
                localVarHeaderParameter['X-Child-Company-Id'] = String(xChildCompanyId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * You can create the subscription to include the plans that your customers consume
         * @summary Create Subscription
         * @param {string} id Identifier of the resource
         * @param {SubscriptionRequest} subscriptionRequest requested field for subscriptions
         * @param {CreateSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription: (id_2, subscriptionRequest_1, acceptLanguage_2, xChildCompanyId_2, ...args_2) => __awaiter(this, [id_2, subscriptionRequest_1, acceptLanguage_2, xChildCompanyId_2, ...args_2], void 0, function* (id, subscriptionRequest, acceptLanguage, xChildCompanyId, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createSubscription', 'id', id);
            // verify required parameter 'subscriptionRequest' is not null or undefined
            assertParamExists('createSubscription', 'subscriptionRequest', subscriptionRequest);
            const localVarPath = `/customers/{id}/subscription`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }
            if (xChildCompanyId != null) {
                localVarHeaderParameter['X-Child-Company-Id'] = String(xChildCompanyId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * You can get the events of the subscription(s) of a client, with the customer id
         * @summary Get Events By Subscription
         * @param {string} id Identifier of the resource
         * @param {GetAllEventsFromSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEventsFromSubscription: (id_3, acceptLanguage_3, xChildCompanyId_3, ...args_3) => __awaiter(this, [id_3, acceptLanguage_3, xChildCompanyId_3, ...args_3], void 0, function* (id, acceptLanguage, xChildCompanyId, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAllEventsFromSubscription', 'id', id);
            const localVarPath = `/customers/{id}/subscription/events`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }
            if (xChildCompanyId != null) {
                localVarHeaderParameter['X-Child-Company-Id'] = String(xChildCompanyId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get Subscription
         * @param {string} id Identifier of the resource
         * @param {GetSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription: (id_4, acceptLanguage_4, ...args_4) => __awaiter(this, [id_4, acceptLanguage_4, ...args_4], void 0, function* (id, acceptLanguage, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSubscription', 'id', id);
            const localVarPath = `/customers/{id}/subscription`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * You can pause the subscription to stop the plans that your customers consume
         * @summary Pause Subscription
         * @param {string} id Identifier of the resource
         * @param {PauseSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseSubscription: (id_5, acceptLanguage_5, xChildCompanyId_4, ...args_5) => __awaiter(this, [id_5, acceptLanguage_5, xChildCompanyId_4, ...args_5], void 0, function* (id, acceptLanguage, xChildCompanyId, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pauseSubscription', 'id', id);
            const localVarPath = `/customers/{id}/subscription/pause`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }
            if (xChildCompanyId != null) {
                localVarHeaderParameter['X-Child-Company-Id'] = String(xChildCompanyId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * You can resume the subscription to start the plans that your customers consume
         * @summary Resume Subscription
         * @param {string} id Identifier of the resource
         * @param {ResumeSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeSubscription: (id_6, acceptLanguage_6, xChildCompanyId_5, ...args_6) => __awaiter(this, [id_6, acceptLanguage_6, xChildCompanyId_5, ...args_6], void 0, function* (id, acceptLanguage, xChildCompanyId, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('resumeSubscription', 'id', id);
            const localVarPath = `/customers/{id}/subscription/resume`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }
            if (xChildCompanyId != null) {
                localVarHeaderParameter['X-Child-Company-Id'] = String(xChildCompanyId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * You can modify the subscription to change the plans that your customers consume
         * @summary Update Subscription
         * @param {string} id Identifier of the resource
         * @param {SubscriptionUpdateRequest} subscriptionUpdateRequest requested field for update a subscription
         * @param {UpdateSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription: (id_7, subscriptionUpdateRequest_1, acceptLanguage_7, xChildCompanyId_6, ...args_7) => __awaiter(this, [id_7, subscriptionUpdateRequest_1, acceptLanguage_7, xChildCompanyId_6, ...args_7], void 0, function* (id, subscriptionUpdateRequest, acceptLanguage, xChildCompanyId, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSubscription', 'id', id);
            // verify required parameter 'subscriptionUpdateRequest' is not null or undefined
            assertParamExists('updateSubscription', 'subscriptionUpdateRequest', subscriptionUpdateRequest);
            const localVarPath = `/customers/{id}/subscription`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }
            if (xChildCompanyId != null) {
                localVarHeaderParameter['X-Child-Company-Id'] = String(xChildCompanyId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionUpdateRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SubscriptionsApi - functional programming interface
 * @export
 */
export const SubscriptionsApiFp = function (configuration) {
    const localVarAxiosParamCreator = SubscriptionsApiAxiosParamCreator(configuration);
    return {
        /**
         * You can cancel the subscription to stop the plans that your customers consume
         * @summary Cancel Subscription
         * @param {string} id Identifier of the resource
         * @param {CancelSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSubscription(id, acceptLanguage, xChildCompanyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cancelSubscription(id, acceptLanguage, xChildCompanyId, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = operationServerMap['SubscriptionsApi.cancelSubscription']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * You can create the subscription to include the plans that your customers consume
         * @summary Create Subscription
         * @param {string} id Identifier of the resource
         * @param {SubscriptionRequest} subscriptionRequest requested field for subscriptions
         * @param {CreateSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription(id, subscriptionRequest, acceptLanguage, xChildCompanyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createSubscription(id, subscriptionRequest, acceptLanguage, xChildCompanyId, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = operationServerMap['SubscriptionsApi.createSubscription']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * You can get the events of the subscription(s) of a client, with the customer id
         * @summary Get Events By Subscription
         * @param {string} id Identifier of the resource
         * @param {GetAllEventsFromSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEventsFromSubscription(id, acceptLanguage, xChildCompanyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAllEventsFromSubscription(id, acceptLanguage, xChildCompanyId, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = operationServerMap['SubscriptionsApi.getAllEventsFromSubscription']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get Subscription
         * @param {string} id Identifier of the resource
         * @param {GetSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription(id, acceptLanguage, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSubscription(id, acceptLanguage, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = operationServerMap['SubscriptionsApi.getSubscription']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * You can pause the subscription to stop the plans that your customers consume
         * @summary Pause Subscription
         * @param {string} id Identifier of the resource
         * @param {PauseSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseSubscription(id, acceptLanguage, xChildCompanyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pauseSubscription(id, acceptLanguage, xChildCompanyId, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = operationServerMap['SubscriptionsApi.pauseSubscription']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * You can resume the subscription to start the plans that your customers consume
         * @summary Resume Subscription
         * @param {string} id Identifier of the resource
         * @param {ResumeSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeSubscription(id, acceptLanguage, xChildCompanyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.resumeSubscription(id, acceptLanguage, xChildCompanyId, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = operationServerMap['SubscriptionsApi.resumeSubscription']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * You can modify the subscription to change the plans that your customers consume
         * @summary Update Subscription
         * @param {string} id Identifier of the resource
         * @param {SubscriptionUpdateRequest} subscriptionUpdateRequest requested field for update a subscription
         * @param {UpdateSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription(id, subscriptionUpdateRequest, acceptLanguage, xChildCompanyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateSubscription(id, subscriptionUpdateRequest, acceptLanguage, xChildCompanyId, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = operationServerMap['SubscriptionsApi.updateSubscription']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
/**
 * SubscriptionsApi - factory interface
 * @export
 */
export const SubscriptionsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = SubscriptionsApiFp(configuration);
    return {
        /**
         * You can cancel the subscription to stop the plans that your customers consume
         * @summary Cancel Subscription
         * @param {string} id Identifier of the resource
         * @param {CancelSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSubscription(id, acceptLanguage, xChildCompanyId, options) {
            return localVarFp.cancelSubscription(id, acceptLanguage, xChildCompanyId, options).then((request) => request(axios, basePath));
        },
        /**
         * You can create the subscription to include the plans that your customers consume
         * @summary Create Subscription
         * @param {string} id Identifier of the resource
         * @param {SubscriptionRequest} subscriptionRequest requested field for subscriptions
         * @param {CreateSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription(id, subscriptionRequest, acceptLanguage, xChildCompanyId, options) {
            return localVarFp.createSubscription(id, subscriptionRequest, acceptLanguage, xChildCompanyId, options).then((request) => request(axios, basePath));
        },
        /**
         * You can get the events of the subscription(s) of a client, with the customer id
         * @summary Get Events By Subscription
         * @param {string} id Identifier of the resource
         * @param {GetAllEventsFromSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEventsFromSubscription(id, acceptLanguage, xChildCompanyId, options) {
            return localVarFp.getAllEventsFromSubscription(id, acceptLanguage, xChildCompanyId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Subscription
         * @param {string} id Identifier of the resource
         * @param {GetSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription(id, acceptLanguage, options) {
            return localVarFp.getSubscription(id, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * You can pause the subscription to stop the plans that your customers consume
         * @summary Pause Subscription
         * @param {string} id Identifier of the resource
         * @param {PauseSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseSubscription(id, acceptLanguage, xChildCompanyId, options) {
            return localVarFp.pauseSubscription(id, acceptLanguage, xChildCompanyId, options).then((request) => request(axios, basePath));
        },
        /**
         * You can resume the subscription to start the plans that your customers consume
         * @summary Resume Subscription
         * @param {string} id Identifier of the resource
         * @param {ResumeSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeSubscription(id, acceptLanguage, xChildCompanyId, options) {
            return localVarFp.resumeSubscription(id, acceptLanguage, xChildCompanyId, options).then((request) => request(axios, basePath));
        },
        /**
         * You can modify the subscription to change the plans that your customers consume
         * @summary Update Subscription
         * @param {string} id Identifier of the resource
         * @param {SubscriptionUpdateRequest} subscriptionUpdateRequest requested field for update a subscription
         * @param {UpdateSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription(id, subscriptionUpdateRequest, acceptLanguage, xChildCompanyId, options) {
            return localVarFp.updateSubscription(id, subscriptionUpdateRequest, acceptLanguage, xChildCompanyId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SubscriptionsApi - object-oriented interface
 * @export
 * @class SubscriptionsApi
 * @extends {BaseAPI}
 */
export class SubscriptionsApi extends BaseAPI {
    /**
     * You can cancel the subscription to stop the plans that your customers consume
     * @summary Cancel Subscription
     * @param {string} id Identifier of the resource
     * @param {CancelSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    cancelSubscription(id, acceptLanguage, xChildCompanyId, options) {
        return SubscriptionsApiFp(this.configuration).cancelSubscription(id, acceptLanguage, xChildCompanyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * You can create the subscription to include the plans that your customers consume
     * @summary Create Subscription
     * @param {string} id Identifier of the resource
     * @param {SubscriptionRequest} subscriptionRequest requested field for subscriptions
     * @param {CreateSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    createSubscription(id, subscriptionRequest, acceptLanguage, xChildCompanyId, options) {
        return SubscriptionsApiFp(this.configuration).createSubscription(id, subscriptionRequest, acceptLanguage, xChildCompanyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * You can get the events of the subscription(s) of a client, with the customer id
     * @summary Get Events By Subscription
     * @param {string} id Identifier of the resource
     * @param {GetAllEventsFromSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    getAllEventsFromSubscription(id, acceptLanguage, xChildCompanyId, options) {
        return SubscriptionsApiFp(this.configuration).getAllEventsFromSubscription(id, acceptLanguage, xChildCompanyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Subscription
     * @param {string} id Identifier of the resource
     * @param {GetSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    getSubscription(id, acceptLanguage, options) {
        return SubscriptionsApiFp(this.configuration).getSubscription(id, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * You can pause the subscription to stop the plans that your customers consume
     * @summary Pause Subscription
     * @param {string} id Identifier of the resource
     * @param {PauseSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    pauseSubscription(id, acceptLanguage, xChildCompanyId, options) {
        return SubscriptionsApiFp(this.configuration).pauseSubscription(id, acceptLanguage, xChildCompanyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * You can resume the subscription to start the plans that your customers consume
     * @summary Resume Subscription
     * @param {string} id Identifier of the resource
     * @param {ResumeSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    resumeSubscription(id, acceptLanguage, xChildCompanyId, options) {
        return SubscriptionsApiFp(this.configuration).resumeSubscription(id, acceptLanguage, xChildCompanyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * You can modify the subscription to change the plans that your customers consume
     * @summary Update Subscription
     * @param {string} id Identifier of the resource
     * @param {SubscriptionUpdateRequest} subscriptionUpdateRequest requested field for update a subscription
     * @param {UpdateSubscriptionAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    updateSubscription(id, subscriptionUpdateRequest, acceptLanguage, xChildCompanyId, options) {
        return SubscriptionsApiFp(this.configuration).updateSubscription(id, subscriptionUpdateRequest, acceptLanguage, xChildCompanyId, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * @export
 */
export const CancelSubscriptionAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
};
/**
 * @export
 */
export const CreateSubscriptionAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
};
/**
 * @export
 */
export const GetAllEventsFromSubscriptionAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
};
/**
 * @export
 */
export const GetSubscriptionAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
};
/**
 * @export
 */
export const PauseSubscriptionAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
};
/**
 * @export
 */
export const ResumeSubscriptionAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
};
/**
 * @export
 */
export const UpdateSubscriptionAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
};
