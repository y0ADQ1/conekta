"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../api");
const configuration_1 = require("../configuration");
const base_test_1 = require("./base-test");
describe('Antifraud API', () => {
    let client;
    beforeAll(() => {
        const config = new configuration_1.Configuration({ accessToken: "key_xxxxxxxx" });
        client = new api_1.AntifraudApi(config, base_test_1.baseTest.BasePath);
    });
    describe("general", () => {
        it('should be defined', () => {
            expect(client).toBeInstanceOf(api_1.AntifraudApi);
        });
    });
    describe('whitelist', () => {
        it('create a whistelist, should return a whitelist', () => __awaiter(void 0, void 0, void 0, function* () {
            const request = {
                description: "test description",
                field: "email",
                value: "fcarrero@gmail.com"
            };
            const response = (yield client.createRuleWhitelist("es", request)).data;
            expect(response).toBeDefined();
            expect(response.value).toEqual(request.value);
            expect(response.id).toEqual("618c3f30db8b8da9be376b17");
            expect(response.field).toEqual(request.field);
            expect(response.description).toEqual(request.description);
        }));
        it('delete a whistelist, should return a whitelist', () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "618c3f2fdb8b8da9be376afe";
            const response = (yield client.deleteRuleWhitelist(id)).data;
            expect(response).toBeDefined();
            expect(response.id).toEqual(id);
            expect(response.field).toEqual("email");
            expect(response.value).toEqual("ramirez_2402@hotmail.com");
        }));
        it('get a list of whistelist, should return a whitelist', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = (yield client.getRuleWhitelist()).data;
            expect(response).toBeDefined();
            expect(response.data.length).toEqual(25);
            expect(response.has_more).toBe(true);
        }));
    });
    describe('blacklist', () => {
        it('create a blacklist, should return a blacklist', () => __awaiter(void 0, void 0, void 0, function* () {
            const request = {
                description: "test description",
                field: "email",
                value: "fcarrero_black@gmail.com"
            };
            const response = (yield client.createRuleBlacklist(request)).data;
            expect(response).toBeDefined();
            expect(response.value).toEqual(request.value);
            expect(response.field).toEqual(request.field);
        }));
        it('delete a blacklist, should return a blacklist', () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "618c3f30db8b8da9be376b1e";
            const response = (yield client.deleteRuleBlacklist(id)).data;
            expect(response).toBeDefined();
            expect(response.id).toEqual(id);
            expect(response.field).toEqual("email");
            expect(response.value).toEqual("aita_lv@hotmail.com");
        }));
        it('get a list of blacklist, should return a blacklist', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = (yield client.getRuleBlacklist()).data;
            expect(response).toBeDefined();
            expect(response.data.length).toEqual(25);
            expect(response.has_more).toBe(true);
            expect(response.data[0].field).toEqual("email");
        }));
    });
});
