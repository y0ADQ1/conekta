"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../api");
const configuration_1 = require("../configuration");
const base_test_1 = require("./base-test");
describe('Discounts API', () => {
    let client;
    beforeAll(() => {
        const config = new configuration_1.Configuration({ accessToken: "key_xxxxxxxx" });
        client = new api_1.DiscountsApi(config, base_test_1.baseTest.BasePath);
    });
    describe('General', () => {
        it('should be defined', () => {
            expect(client).toBeDefined();
        });
    });
    describe('Orders Create Discount Lines', () => {
        it('Create Discount Lines', () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "ord_2tVyWPnCPWbrV37mW";
            const order_discount_lines = {
                amount: 500,
                code: "track",
                type: "loyalty"
            };
            const response = (yield client.ordersCreateDiscountLine(id, order_discount_lines)).data;
            expect(response).toBeDefined();
            expect(response.parent_id).toEqual(id);
            expect(response.amount).toEqual(order_discount_lines.amount);
            expect(response.id).toBeTruthy();
        }));
    });
    describe('Orders Delete Discount Lines', () => {
        it('Delete Discount Lines', () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "ord_2tVyWPnCPWbrV37mW";
            const order_discount_line_id = "dis_lin_2tVyahK8Nts7rKRMZ";
            const response = (yield client.ordersDeleteDiscountLines(id, order_discount_line_id)).data;
            expect(response).toBeDefined();
            expect(response.parent_id).toEqual(id);
            expect(response.id).toEqual(order_discount_line_id);
        }));
    });
    describe('Orders Get Discount Line', () => {
        it('Get Discount Lines', () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "ord_2tkwrBmcvGnA9zdU9";
            const discount_lines_id = "dis_lin_2tkwrBmcvGnA9zdU6";
            const response = (yield client.ordersGetDiscountLine(id, discount_lines_id)).data;
            expect(response).toBeDefined();
            expect(response.parent_id).toEqual(id);
            expect(response.id).toBeTruthy();
        }));
    });
    describe('Orders List Discount Lines', () => {
        it('List Discount Lines', () => __awaiter(void 0, void 0, void 0, function* () {
            const order_id = "ord_2tVyWPnCPWbrV37mW";
            const response = (yield client.ordersGetDiscountLines(order_id)).data;
            expect(response).toBeDefined();
            expect(response.data).toBeDefined();
            expect(response.data.length).toEqual(2);
            expect(response.has_more).toEqual(false);
            expect(response.data[0].parent_id).toEqual(order_id);
            expect(response.data[0].amount).toEqual(100);
            expect(response.data[0].code).toEqual("trac");
        }));
    });
    describe('Orders Update Discount Lines', () => {
        it('Update Discount Lines', () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "ord_2tVyWPnCPWbrV37mW";
            const order_discount_line_id = "dis_lin_2tVyahK8Nts7rKRMZ";
            const order_discount_lines = {
                amount: 100,
            };
            const response = (yield client.ordersUpdateDiscountLines(id, order_discount_line_id, order_discount_lines, "es")).data;
            expect(response).toBeDefined();
            expect(response.parent_id).toEqual(id);
            expect(response.id).toEqual(order_discount_line_id);
            expect(response.amount).toEqual(order_discount_lines.amount);
        }));
    });
});
