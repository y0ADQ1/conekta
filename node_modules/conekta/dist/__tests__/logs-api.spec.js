"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../api");
const base_test_1 = require("./base-test");
const configuration_1 = require("../configuration");
describe("Logs api", () => {
    let client;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        const config = new configuration_1.Configuration({ accessToken: "key_xxxxxxxx" });
        client = new api_1.LogsApi(config, base_test_1.baseTest.BasePath);
    }));
    describe("General", () => {
        it("should be defined", () => {
            expect(client).toBeDefined();
        });
    });
    describe("Logs Get", () => {
        it("Get Logs", () => __awaiter(void 0, void 0, void 0, function* () {
            const response = (yield client.getLogs("en", undefined, 20)).data;
            expect(response).toBeDefined();
            expect(response.data).toBeDefined();
            expect(response.data.length).toEqual(20);
            expect(response.data[0].request_headers).not.toBeNull();
        }));
        it("Get Log", () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "6419dd15b985080001fc280e";
            const response = (yield client.getLogById(id, "es")).data;
            expect(response).toBeDefined();
            expect(response.request_headers).not.toBeNull();
            expect(response.request_body).not.toBeNull();
        }));
    });
});
