"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const configuration_1 = require("../configuration");
const api_1 = require("../api");
const base_test_1 = require("./base-test");
describe('Events API', () => {
    let client;
    beforeAll(() => {
        const config = new configuration_1.Configuration({ accessToken: "key_xxxxxxxx" });
        client = new api_1.EventsApi(config, base_test_1.baseTest.BasePath);
    });
    describe('General', () => {
        it('should be defined', () => {
            expect(client).toBeDefined();
        });
    });
    describe('Events Get', () => {
        it('Get Events', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = (yield client.getEvents()).data;
            expect(response).toBeDefined();
            expect(response.data).toBeDefined();
            expect(response.has_more).toEqual(true);
            expect(response.previous_page_url).toBeNull();
            expect(response.next_page_url).toBeDefined();
            expect(response.object).toEqual("list");
            expect(response.data.length).toEqual(20);
        }));
        it('Get event', () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "63fe3d2ddf70970001cfb41a";
            const response = (yield client.getEvent(id, "en")).data;
            expect(response).toBeDefined();
            expect(response.webhook_logs.length).toEqual(1);
            expect(response.object).toEqual("event");
            expect(response.type).toEqual("webhook_ping");
            expect(response.livemode).toEqual(true);
            expect(response.webhook_logs[0].id).toEqual("webhl_2tSipZiQaZ1DLH33n");
            expect(new URL(response.webhook_logs[0].url)).toBeTruthy();
        }));
        it("resend event", () => __awaiter(void 0, void 0, void 0, function* () {
            const event_id = "6463d6e35a4c3e001819e760";
            const webhook_log_id = "webhl_2svd2sh6GbqzyWBNZ";
            const response = (yield client.resendEvent(event_id, webhook_log_id)).data;
            expect(response).toBeDefined();
            expect(response.failed_attempts).toEqual(6);
            expect(response.id).toEqual(webhook_log_id);
            expect(response.last_http_response_status).toBe(405);
        }));
    });
});
