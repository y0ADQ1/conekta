"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../api");
const base_test_1 = require("./base-test");
const configuration_1 = require("../configuration");
describe('Charges API', () => {
    let client;
    beforeAll(() => {
        const config = new configuration_1.Configuration({ accessToken: "key_xxxxxxxx" });
        client = new api_1.ChargesApi(config, base_test_1.baseTest.BasePath);
    });
    describe("general", () => {
        it('should be defined', () => {
            expect(client).toBeInstanceOf(api_1.ChargesApi);
        });
    });
    describe('orders Create Charge', () => {
        it('card', () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "ord_2tVKxbhNzfUnGjnXG";
            const request = {
                amount: 40000,
                payment_method: {
                    type: "card",
                    token_id: "tok_2tVKyGpobEKAR3xVH"
                }
            };
            var response = (yield client.ordersCreateCharge(id, request)).data;
            expect(response).toBeDefined();
            expect(response.amount).toEqual(request.amount);
            expect(response.object).toEqual("charge");
            expect(response.status).toEqual("pre_authorized");
            expect(response.payment_method.object).toEqual("card_payment");
            expect(response.payment_method.type).toEqual("credit");
        }));
        it('cash', () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "ord_2tVL8dT1Hm3y3YiaN";
            const charge_request = {
                amount: 40000,
                payment_method: { type: "cash" }
            };
            const response = (yield client.ordersCreateCharge(id, charge_request)).data;
            expect(response).toBeDefined();
            expect(response.amount).toEqual(charge_request.amount);
            expect(response.object).toEqual("charge");
            expect(response.status).toEqual("pending_payment");
            expect(response.payment_method.object).toEqual("cash_payment");
            expect(response.payment_method.type).toEqual("oxxo");
            expect(response.payment_method.barcode_url).not.toBeNull();
            expect(response.payment_method.cashier_id).toBeNull();
            expect(response.payment_method.auth_code).toBeNull();
            expect(response.payment_method.store).toBeNull();
        }));
        it('spei', () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "ord_2tVLUFrQBB4HKz1zj";
            const charge_request = {
                amount: 40000,
                payment_method: { type: "spei" }
            };
            var response = (yield client.ordersCreateCharge(id, charge_request)).data;
            expect(response).toBeDefined();
            expect(response.amount).toEqual(charge_request.amount);
            expect(response.object).toEqual("charge");
            expect(response.status).toEqual("pending_payment");
            expect(response.payment_method.object).toEqual("bank_transfer_payment");
            expect(response.payment_method.type).toEqual("spei");
            expect(response.id).toEqual("6408c87bde4b8e00010744e3");
            expect(response.order_id).toEqual(id);
            expect(response.payment_method.clabe).toEqual("646180111805035472");
            expect(response.payment_method.bank).toEqual("STP");
        }));
    });
    describe('Get charges', () => {
        it('should return a list of charges', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = (yield client.getCharges("es", undefined, 20)).data;
            expect(response).toBeDefined();
            expect(response.object).toEqual("list");
            expect(response.data).toBeDefined();
            expect(response.data.length).toEqual(20);
            expect(response.has_more).toBeTruthy();
            expect(response.data[0].channel.id).toEqual("channel_2tqJMS7on7HBVqWKo");
            expect(response.data[0].payment_method.reference).toEqual("93003547316416");
            expect(response.data[0].refunds).toBeNull();
            expect(response.data[0].reference_id).toBeNull();
        }));
    });
    describe('Update charge', () => {
        it('should update a charge', () => __awaiter(void 0, void 0, void 0, function* () {
            const updateRequest = {
                reference_id: "123456789"
            };
            const response = (yield client.updateCharge("6524722f28c7ba0016a5b17d", updateRequest)).data;
            expect(response).toBeDefined();
            expect(response.object).toEqual("charge");
            expect(response.reference_id).toEqual(updateRequest.reference_id);
        }));
    });
});
