"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../api");
const base_test_1 = require("./base-test");
const configuration_1 = require("../configuration");
describe('Companies API', () => {
    let client;
    beforeAll(() => {
        const config = new configuration_1.Configuration({ accessToken: "key_xxxxxxxx" });
        client = new api_1.CompaniesApi(config, base_test_1.baseTest.BasePath);
    });
    describe("general", () => {
        it('should be defined', () => {
            expect(client).toBeInstanceOf(api_1.CompaniesApi);
        });
    });
    it('should get company', () => __awaiter(void 0, void 0, void 0, function* () {
        const id = "6441bb27659a060465da7335";
        const response = (yield client.getCompany(id)).data;
        expect(response).toBeDefined();
        expect(response.id).toEqual(id);
        expect(response.name).toEqual("Child Company A");
    }));
    it('should get a list of companies', () => __awaiter(void 0, void 0, void 0, function* () {
        const response = (yield client.getCompanies()).data;
        expect(response).toBeDefined();
        expect(response.data.length).toBeGreaterThan(0);
        expect(response.has_more).toEqual(false);
        expect(response.data[0].id).toEqual("6441bb27659a060465da7335");
    }));
});
