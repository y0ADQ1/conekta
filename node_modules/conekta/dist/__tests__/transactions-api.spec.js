"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../api");
const base_test_1 = require("./base-test");
const configuration_1 = require("../configuration");
describe("TransactionsApi", () => {
    let client;
    beforeAll(() => {
        const config = new configuration_1.Configuration({ accessToken: "key_xxxxxxxx" });
        client = new api_1.TransactionsApi(config, base_test_1.baseTest.BasePath);
    });
    describe("general", () => {
        it("should be defined", () => {
            expect(client).toBeDefined();
        });
    });
    describe("Get Transaction", () => {
        it("should get a transaction", () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "6456b6dfac0fd40001a64eb8";
            const response = (yield client.getTransaction(id)).data;
            expect(response).toBeDefined();
            expect(response.id).toEqual(id);
            expect(response.object).toEqual("transaction");
        }));
    });
    describe("Get Transactions", () => {
        it("should get transactions", () => __awaiter(void 0, void 0, void 0, function* () {
            const response = (yield client.getTransactions("es", undefined, 2)).data;
            expect(response).toBeDefined();
            expect(response.has_more).toBeTruthy();
            expect(response.next_page_url).toBeDefined();
            expect(response.previous_page_url).toBeNull();
            expect(response.data.length).toBeGreaterThan(0);
            expect(response.data[0].object).toEqual("transaction");
            expect(response.data.length).toEqual(2);
        }));
    });
});
