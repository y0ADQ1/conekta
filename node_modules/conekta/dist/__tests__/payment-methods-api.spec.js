"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const payment_methods_api_1 = require("../api/payment-methods-api");
const base_test_1 = require("./base-test");
const configuration_1 = require("../configuration");
describe("PaymentMethodsApi", () => {
    let client;
    beforeAll(() => {
        const config = new configuration_1.Configuration({ accessToken: "key_xxxxxxxx" });
        client = new payment_methods_api_1.PaymentMethodsApi(config, base_test_1.baseTest.BasePath);
    });
    describe("general", () => {
        it("should be defined", () => {
            expect(client).toBeDefined();
        });
    });
    describe("create customer payment method", () => {
        it("should create customer payment method", () => __awaiter(void 0, void 0, void 0, function* () {
            const customer_id = "cus_2tXyF9BwPG14UMkkg";
            const request = {
                type: "oxxo_recurrent",
            };
            const response = (yield client.createCustomerPaymentMethods(customer_id, request)).data;
            expect(response).toBeDefined();
        }));
    });
    describe("Delete customer payment method", () => {
        it("should delete customer payment method", () => __awaiter(void 0, void 0, void 0, function* () {
            const customer_id = "cus_2tZWxbTPtQgGJGh8P";
            const payment_method_id = "src_2tZWxbTPtQgGJGh8R";
            const response = (yield client.deleteCustomerPaymentMethods(customer_id, payment_method_id, "en")).data;
            expect(response).toBeDefined();
            expect(response.parent_id).toBe(customer_id);
            expect(response.id).toBe(payment_method_id);
        }));
    });
    describe("update customer payment method", () => {
        it("should update customer payment method", () => __awaiter(void 0, void 0, void 0, function* () {
            const customer_id = "cus_2tZWxbTPtQgGJGh8P";
            const payment_method_id = "src_2tZWxbTPtQgGJGh8R";
            const request = {
                name: "name of person",
            };
            const response = (yield client.updateCustomerPaymentMethods(customer_id, payment_method_id, request)).data;
            expect(response).toBeDefined();
            expect(response.name).toBe("name of person");
            expect(response.parent_id).toBe(customer_id);
            expect(response.id).toBe(payment_method_id);
        }));
    });
    describe("get customer payment method", () => {
        it("should get customer payment method", () => __awaiter(void 0, void 0, void 0, function* () {
            const payment_method_id = "src_2tbd5Bgy67RL9oycM";
            const response = (yield client.getCustomerPaymentMethods(payment_method_id)).data;
            expect(response).toBeDefined();
            expect(response.data[0].id).toBe(payment_method_id);
            expect(response.next_page_url).toBeNull();
            expect(response.previous_page_url).toBeNull();
            expect(response.has_more).toBeFalsy();
        }));
    });
});
