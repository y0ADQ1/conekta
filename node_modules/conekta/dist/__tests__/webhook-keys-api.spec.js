"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../api");
const base_test_1 = require("./base-test");
const configuration_1 = require("../configuration");
describe("WebhookKeysApi", () => {
    let client;
    beforeAll(() => {
        const config = new configuration_1.Configuration({ accessToken: "key_xxxxxxxx" });
        client = new api_1.WebhookKeysApi(config, base_test_1.baseTest.BasePath);
    });
    describe("general", () => {
        it("should be defined", () => {
            expect(client).toBeDefined();
        });
    });
    describe("Create Webhook Key", () => {
        it("should create a webhook key", () => __awaiter(void 0, void 0, void 0, function* () {
            const request = {
                active: true
            };
            const response = (yield client.createWebhookKey("en", request)).data;
            expect(response).toBeDefined();
            expect(response.livemode).toBeTruthy();
            expect(response.id).toEqual("645a59da22e7da0001cad283");
            expect(response.object).toEqual("webhook_key");
        }));
    });
    describe("Delete Webhook Key", () => {
        it("should delete a webhook key", () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "645a59da22e7da0001cad283";
            const response = (yield client.deleteWebhookKey(id)).data;
            expect(response).toBeDefined();
            expect(response.livemode).toBeTruthy();
            expect(response.id).toEqual(id);
            expect(response.active).toBeFalsy();
            expect(response.deleted).toBeTruthy();
        }));
    });
    describe("Get Webhook  Key", () => {
        it("should get an active webhook key", () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "645a5eb022e7da0001cad2a4";
            const response = (yield client.getWebhookKey(id)).data;
            expect(response).toBeDefined();
            expect(response.livemode).toBeTruthy();
            expect(response.id).toEqual(id);
            expect(response.object).toEqual("webhook_key");
        }));
        it("should get an inactive webhook key", () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "635594352a1979000185a36a";
            const response = (yield client.getWebhookKey(id)).data;
            expect(response).toBeDefined();
            expect(response.livemode).toBeTruthy();
            expect(response.id).toEqual(id);
            expect(response.object).toEqual("webhook_key");
        }));
    });
    describe("Get Webhook Keys", () => {
        it("should get webhook keys", () => __awaiter(void 0, void 0, void 0, function* () {
            const response = (yield client.getWebhookKeys("es", undefined, 2)).data;
            expect(response).toBeDefined();
            expect(response.data.length).toEqual(2);
            expect(response.has_more).toBeFalsy();
            expect(response.next_page_url).toBeNull();
            expect(response.previous_page_url).toBeNull();
        }));
    });
    describe("Update Webhook Key", () => {
        it("should update a webhook key", () => __awaiter(void 0, void 0, void 0, function* () {
            const id = "645a613622e7da0001cad882";
            const request = {
                active: false
            };
            const response = (yield client.updateWebhookKey(id, "es", request)).data;
            expect(response).toBeDefined();
            expect(response.livemode).toBeTruthy();
            expect(response.id).toEqual(id);
            expect(response.object).toEqual("webhook_key");
            expect(response.active).toBeFalsy();
        }));
    });
});
