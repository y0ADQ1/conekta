"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../api");
const base_test_1 = require("./base-test");
const configuration_1 = require("../configuration");
describe("TokensApi", () => {
    let client;
    beforeAll(() => {
        const config = new configuration_1.Configuration({ accessToken: "key_xxxxxxxx" });
        client = new api_1.TokensApi(config, base_test_1.baseTest.BasePath);
    });
    describe("general", () => {
        it("should be defined", () => {
            expect(client).toBeDefined();
        });
    });
    describe("Create Token", () => {
        it("should create a token", () => __awaiter(void 0, void 0, void 0, function* () {
            const request = {
                card: {
                    number: "5475040095304607",
                    exp_month: "12",
                    exp_year: "2022",
                    cvc: "123",
                    name: "John Doe",
                },
            };
            const response = (yield client.createToken(request)).data;
            expect(response).toBeDefined();
            expect(response.id).toEqual("tok_2toPJUcZ27AH5LsZk");
            expect(response.used).toEqual(false);
            expect(response.livemode).toEqual(true);
            expect(response.checkout).toBeFalsy();
        }));
    });
    describe("Create empty Token", () => {
        it("should create an empty token", () => __awaiter(void 0, void 0, void 0, function* () {
            const request = {
                checkout: {
                    returns_control_on: "Token"
                }
            };
            const response = (yield client.createToken(request)).data;
            expect(response).toBeDefined();
            expect(response.checkout.status).toBe("Issued");
            expect(response.checkout).toBeTruthy();
        }));
    });
});
